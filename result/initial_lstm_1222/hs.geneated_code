class Archmage(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Archmage', 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON#NEWLINE#            )#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 7, spell_damage=1)
class BluegillWarrior(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Booty Bay Bodyguard', 5, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(5, 4, windfury=True)
class ColdlightOracle(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Darkscale Healer', 5, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 5, deathrattle=Battlecry(Draw(), PlayerSelector()))
class Wisps5(WeaponCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Fiery War Axe', 2, CHARACTER_CLASS.SHAMAN,#NEWLINE#            CARD_RARITY.FREE, overload=2)#NEWLINE##NEWLINE#    def create_weapon(self, player):#NEWLINE#        return Weapon(3, 2)
class ColdlightOracle(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Frostwolf Warlord', 5, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, battlecry=Battlecry(Gain(), MinionSelector(#NEWLINE#            players=BothPlayer(), picker=UserPicker())))#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 4)
class Hellfire(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Hellfire', 4, CHARACTER_CLASS.WARLOCK,#NEWLINE#            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.#NEWLINE#            find_spell_target)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        self.target.damage(player.effective_spell_damage(3), self)
class Innervate(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Innervate', 0, CHARACTER_CLASS.DRUID, CARD_RARITY#NEWLINE#            .FREE)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        for minion in copy.copy(game.other_player.minions):#NEWLINE#            minion.add_buff(Buff(Frozen()))
class BluegillWarrior(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Magma Rager', 3, CHARACTER_CLASS.ALL, CARD_RARITY#NEWLINE#            .FREE, minion_type=MINION_TYPE.BEAST)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(5, 1)
class Wisps5(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Mortal Coil', 1, CHARACTER_CLASS.WARLOCK,#NEWLINE#            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.#NEWLINE#            find_minion_spell_target)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        self.target.damage(player.effective_spell_damage(1), self)#NEWLINE#        self.target.add_effect(Effect(TurnEnded(player=CurrentPlayer()),#NEWLINE#            ActionTag(Kill(), SelfSelector())))
class Polymorph(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Polymorph', 4, CHARACTER_CLASS.MAGE, CARD_RARITY.#NEWLINE#            FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        self.target.die(self)#NEWLINE#        self.target.increase_health(2)
class WorthlessImp(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Searing Totem', 1, CHARACTER_CLASS.SHAMAN,#NEWLINE#            CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(1, 1)
class BluegillWarrior(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Silverback Patriarch', 3, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(1, 4, taunt=True)
class ColdlightOracle(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Stormwind Knight', 4, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 5, charge=True)
class BluegillWarrior(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Voodoo Doctor', 1, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 1, deathrattle=Battlecry(Heal(2), MinionSelector(#NEWLINE#            players=BothPlayer())), taunt=True)
class WorthlessImp(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Wrath of Air Totem', 1, CHARACTER_CLASS.SHAMAN,#NEWLINE#            CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(0, 2, spell_damage=1)
class Wisps5(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Astral Communion', 4, CHARACTER_CLASS.DRUID,#NEWLINE#            CARD_RARITY.EPIC)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        targets = copy.copy(game.other_player.minions)#NEWLINE#        targets.extend(game.current_player.minions)#NEWLINE#        for target in targets:#NEWLINE#            target.heal(player.effective_heal_power(target.#NEWLINE#                calculate_max_health()), self)
class Annoy-o-Tron(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Annoy-o-Tron', 2, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(1, 2, charge=True)
class ColdlightOracle(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Burly Rockjaw Trogg', 4, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(3, 5, effects=[Effect(MinionSummoned(IsType(#NEWLINE#            MINION_TYPE.MURLOC)), ActionTag(Give(ChangeAttack(1)),#NEWLINE#            SelfSelector())), Effect(SpellCast(IsType(MINION_TYPE.MURLOC)),#NEWLINE#            ActionTag(Give(ChangeHealth(1)), SelfSelector()))])
class WorthlessImp(WeaponCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Cogmaster Wrench', 3, CHARACTER_CLASS.PALADIN,#NEWLINE#            CARD_RARITY.EPIC)#NEWLINE##NEWLINE#    def create_weapon(self, player):#NEWLINE#        return Weapon(1, 3, effects=[Effect(CharacterAttack(IsHero()),#NEWLINE#            ActionTag(Give(ChangeAttack(2)), SelfSelector())), Effect(#NEWLINE#            MinionSummoned(IsType(MINION_TYPE.BEAST)), ActionTag(Give(#NEWLINE#            ChangeAttack(2)), SelfSelector()))])
class Wisps5(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Echo of Medivh', 4, CHARACTER_CLASS.PALADIN,#NEWLINE#            CARD_RARITY.EPIC)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        targets = copy.copy(game.other_player.minions)#NEWLINE#        targets.extend(player.minions)#NEWLINE#        for target in targets:#NEWLINE#            minion.heal(player.effective_heal_power(target.#NEWLINE#                calculate_max_health()), self)
class GrimscaleOracle(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Floating Watcher', 5, CHARACTER_CLASS.WARLOCK,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 4, effects=[Effect(MinionDied(player=BothPlayer()),#NEWLINE#            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])
class ColdlightOracle(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Gnomish Experimenter', 3, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(2#NEWLINE#            )), Buff(ChangeHealth(2))]), MinionSelector(picker=UserPicker())))#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(3, 2)
class ColdlightOracle(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Iron Juggernaut', 6, CHARACTER_CLASS.ROGUE,#NEWLINE#            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Give([Buff(#NEWLINE#            ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector(),#NEWLINE#            GreaterThan(Count(CardSelector()), value=0)))#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(6, 5)
class ColdlightOracle(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Madder Bomber', 5, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.RARE, battlecry=Battlecry(Damage(6),#NEWLINE#            CharacterSelector(players=BothPlayer(), picker=RandomPicker(6))))#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(5, 4)
class Mini-Mage(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Mini-Mage', 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 1, buffs=[Buff(ChangeAttack(1))])
class ColdlightOracle(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Piloted Sky Golem', 6, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.EPIC, minion_type=MINION_TYPE.MECH)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(6, 4, deathrattle=Deathrattle(Summon(CardQuery(#NEWLINE#            conditions=[ManaCost(2), IsMinion()])), PlayerSelector()))
class DruidOfTheFlame(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Scarlet Purifier', 3, CHARACTER_CLASS.ROGUE,#NEWLINE#            CARD_RARITY.RARE, battlecry=Battlecry(Damage(2),#NEWLINE#            CharacterSelector(None, EnemyPlayer(), RandomPicker(2))))#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 3)
class BloodFury(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Siltfin Spiritwalker', 4, CHARACTER_CLASS.HUNTER,#NEWLINE#            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 5, effects=[Effect(MinionSummoned(IsType(#NEWLINE#            MINION_TYPE.BEAST)), ActionTag(Give(ChangeAttack(1)),#NEWLINE#            SelfSelector())), Effect(MinionDied(IsType(MINION_TYPE.BEAST)),#NEWLINE#            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])
class GrimscaleOracle(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Tinkertown Technician', 3, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(3, 3, deathrattle=Battlecry(Damage(3),#NEWLINE#            CharacterSelector(players=BothPlayer(), picker=UserPicker())))
class Voljin(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Voljin', 5, CHARACTER_CLASS.PALADIN, CARD_RARITY.#NEWLINE#            LEGENDARY, battlecry=Battlecry(Give([Buff(ChangeAttack(2)),#NEWLINE#            Buff(ChangeHealth(2))]), SelfSelector(), GreaterThan(Count(#NEWLINE#            CardSelector(condition=IsType(MINION_TYPE.MECH))), value=0)))#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(6, 2)
class WorthlessImp(WeaponCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Death Bite', 4, CHARACTER_CLASS.ROGUE,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_weapon(self, player):#NEWLINE#        return Weapon(4, 2, deathrattle=Deathrattle(Damage(1),#NEWLINE#            CharacterSelector(None, picker=RandomPicker())))
class Maexxna(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Maexxna', 6, CHARACTER_CLASS.ALL, CARD_RARITY.#NEWLINE#            LEGENDARY, minion_type=MINION_TYPE.MECH)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 8, effects=[Effect(SpellCast(IsType(MINION_TYPE.#NEWLINE#            MECH)), ActionTag(Give([Buff(ChangeAttack(2)), Buff(#NEWLINE#            ChangeHealth(2))]), SelfSelector()))])
class ColdlightSeer(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Sludge Belcher', 5, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.RARE)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(3, 5, deathrattle=Deathrattle(Summon(CardQuery(#NEWLINE#            conditions=[ManaCost(2), IsMinion()])), PlayerSelector()))
class Voidcaller(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Voidcaller', 4, CHARACTER_CLASS.WARLOCK,#NEWLINE#            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(3, 4, deathrattle=Deathrattle(AddCard(CardQuery(#NEWLINE#            conditions=[IsType(MINION_TYPE.BEAST)])), PlayerSelector()))
class Alexstrasza(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Alexstrasza', 9, CHARACTER_CLASS.ALL, CARD_RARITY#NEWLINE#            .LEGENDARY, minion_type=MINION_TYPE.DRAGON, battlecry=Battlecry#NEWLINE#            (Set(), PlayerSelector()))#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(8, 8)
class ColdlightOracle(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Arcane Golem', 3, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=#NEWLINE#            Battlecry(Kill(), MinionSelector(IsType(MINION_TYPE.MECH),#NEWLINE#            ActionTag(Draw(), PlayerSelector(EnemyPlayer())))))#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 2)
class ColdlightOracle(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Baine Bloodhoof', 4, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.LEGENDARY)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 5)
class Wisps5(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Blade Flurry', 2, CHARACTER_CLASS.ROGUE,#NEWLINE#            CARD_RARITY.EPIC)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        for minion in copy.copy(game.other_player.minions):#NEWLINE#            minion.damage(player.effective_spell_damage(minion.#NEWLINE#                calculate_attack()), self)#NEWLINE#        player.draw()
class Brawl(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Brawl', 5, CHARACTER_CLASS.ROGUE, CARD_RARITY.EPIC)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        targets = copy.copy(game.other_player.minions)#NEWLINE#        targets.extend(game.current_player.minions)#NEWLINE#        for minion in targets:#NEWLINE#            minion.die(self)
class Conceal(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Conceal', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON#NEWLINE#            )#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        for minion in copy.copy(game.other_player.minions):#NEWLINE#            minion.add_buff(Buff(Frozen()))
class Defender(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Defender', 1, CHARACTER_CLASS.PALADIN,#NEWLINE#            CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 1)
class Doomguard(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Doomguard', 5, CHARACTER_CLASS.WARLOCK,#NEWLINE#            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(5, 7, deathrattle=[Deathrattle(AddCard(CardQuery(#NEWLINE#            conditions=[IsType(MINION_TYPE.MECH)])), PlayerSelector())])
class WorthlessImp(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Earth Elemental', 5, CHARACTER_CLASS.SHAMAN,#NEWLINE#            CARD_RARITY.RARE)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(7, 8, auras=[Aura(Taunt(), PlayerSelector()),#NEWLINE#            Deathrattle(Remove(), SelfSelector())])
class WorthlessImp(SecretCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Explosive Trap', 2, CHARACTER_CLASS.HUNTER,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def activate(self, player):#NEWLINE#        player.game.current_player.bind('character_attack', self._reveal)#NEWLINE##NEWLINE#    def deactivate(self, player):#NEWLINE#        player.game.current_player.unbind('character_attack', self._reveal)#NEWLINE##NEWLINE#    def _reveal(self, attacker, target):#NEWLINE#        if isinstance(target, Minion):#NEWLINE#            minion.damage(player.effective_spell_damage(2), self)#NEWLINE#            player.hand.append(new_minon)#NEWLINE#            attacker.player.add_buff(Buff(ManaChange(-2)))#NEWLINE#            super().reveal()
class ColdlightSeer(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Flame of Azzinoth', 1, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 1)
class Gnoll(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Gnoll', 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 2, taunt=True)
class Wisps5(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Holy Wrath', 5, CHARACTER_CLASS.PALADIN,#NEWLINE#            CARD_RARITY.EPIC)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        targets = copy.copy(game.other_player.minions)#NEWLINE#        targets.extend(player.minions)#NEWLINE#        for minion in targets:#NEWLINE#            minion.damage(player.effective_spell_damage(minion.#NEWLINE#                calculate_max_health()), self)
class Infernal(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Infernal', 6, CHARACTER_CLASS.WARLOCK,#NEWLINE#            CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(6, 6)
class DruidOfTheFlame(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Kirin Tor Mage', 3, CHARACTER_CLASS.PALADIN,#NEWLINE#            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 3, deathrattle=Battlecry(The(CARD_SOURCE.health),#NEWLINE#            PlayerSelector()))
class Lightwarden(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Lightwarden', 1, CHARACTER_CLASS.ALL, CARD_RARITY#NEWLINE#            .RARE)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(1, 2, effects=[Effect(SpellCast(IsType(MINION_TYPE.#NEWLINE#            MECH)), ActionTag(Give([Buff(ChangeAttack(1)), Buff(#NEWLINE#            ChangeHealth(1))]), SelfSelector()))])
class ColdlightSeer(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Mana Wraith', 2, CHARACTER_CLASS.ALL, CARD_RARITY#NEWLINE#            .RARE)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 2, auras=[Aura(ChangeAttack(2), MinionSelector())])
class Misdirection(SecretCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Misdirection', 2, CHARACTER_CLASS.ROGUE,#NEWLINE#            CARD_RARITY.RARE)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        targets = copy.copy(game.other_player.minions)#NEWLINE#        targets.extend(game.current_player.minions)#NEWLINE#        for minion in targets:#NEWLINE#            minion.die(self)#NEWLINE##NEWLINE#    def can_use(self, player, game):#NEWLINE#        return super().can_use(player, game) and len(game.other_player.minions#NEWLINE#            ) >= 1
class WorthlessImp(SecretCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Noble Sacrifice', 1, CHARACTER_CLASS.MAGE,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def activate(self, player):#NEWLINE#        player.game.current_player.bind('character_attack', self._reveal)#NEWLINE##NEWLINE#    def deactivate(self, player):#NEWLINE#        player.game.current_player.unbind('character_attack', self._reveal)#NEWLINE##NEWLINE#    def _reveal(self, attacker, target):#NEWLINE#        if isinstance(target, Minion):#NEWLINE#            target.add_buff(Buff(Frozen()))#NEWLINE#            super().reveal()
class Wisps5(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Power the Wild', 2, CHARACTER_CLASS.DRUID,#NEWLINE#            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.#NEWLINE#            find_minion_spell_target)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        self.target.change_attack(4)#NEWLINE#        self.target.increase_health(4)
class Redemption(SecretCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Redemption', 1, CHARACTER_CLASS.DRUID,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE#        self.player = None#NEWLINE##NEWLINE#    def activate(self, player):#NEWLINE#        player.bind('minion_died', self._reveal)#NEWLINE#        self.player = player#NEWLINE##NEWLINE#    def deactivate(self, player):#NEWLINE#        player.unbind('minion_died', self._reveal)#NEWLINE#        self.player = None#NEWLINE##NEWLINE#    def _reveal(self, minion, index):#NEWLINE#        if isinstance(attacker, Minion) and not c.drawn:#NEWLINE#            super().reveal()#NEWLINE##NEWLINE#    def activate(self, player):#NEWLINE#        player.bind('minion_died', self._reveal)#NEWLINE##NEWLINE#    def deactivate(self, player):#NEWLINE#        player.unbind('minion_died', self._reveal)
class Wisps5(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Shadow Madness', 4, CHARACTER_CLASS.PRIEST,#NEWLINE#            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.#NEWLINE#            find_minion_spell_target, filter_func=lambda target: target.#NEWLINE#            calculate_attack() >= 3 and target.spell_targetable())#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        self.target.die(self)
class Wisps5(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Siphon Soul', 6, CHARACTER_CLASS.WARLOCK,#NEWLINE#            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.#NEWLINE#            find_minion_spell_target)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        self.target.die(self)#NEWLINE#        player.hero.heal(player.effective_heal_power(3), self)#NEWLINE#        player.hero.heal(player.effective_heal_power(3), self)
class Spellbender(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Spellbender', 0, CHARACTER_CLASS.PALADIN,#NEWLINE#            CARD_RARITY.RARE, False, minion_type=MINION_TYPE.BEAST)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(1, 3)
class GrimscaleOracle(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Summoning Portal', 4, CHARACTER_CLASS.WARLOCK,#NEWLINE#            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST, battlecry=#NEWLINE#            Battlecry(Give(Buff(ChangeAttack(2))), MinionSelector(picker=#NEWLINE#            RandomPicker())))#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(0, 4)
class ColdlightSeer(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Thrallmar Farseer', 3, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 3, charge=True)
class Wisps5(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Upgrade !', 1, CHARACTER_CLASS.WARRIOR,#NEWLINE#            CARD_RARITY.RARE)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        targets = copy.copy(game.other_player.minions)#NEWLINE#        targets.extend(game.current_player.minions)#NEWLINE#        for minion in targets:#NEWLINE#            minion.die(self)
class Wisp(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Wisp', 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,#NEWLINE#            False, minion_type=MINION_TYPE.BEAST)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(1, 1)
class Whelp(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Black', 1, CHARACTER_CLASS.ALL, CARD_RARITY.#NEWLINE#            COMMON, False, minion_type=MINION_TYPE.DRAGON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 1)
class ColdlightOracle(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Dragonkin Sorcerer', 4, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(3, 5, buffs=[Buff(ChangeAttack(3), GreaterThan(Count(#NEWLINE#            WeaponSelector(EnemyPlayer())), value=0))])
class GrimscaleOracle(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Hungry Dragon', 4, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=#NEWLINE#            Battlecry(Summon(Attribute()), PlayerSelector()))#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(5, 6)
class Wisps5(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Solemn Vigil', 5, CHARACTER_CLASS.PALADIN,#NEWLINE#            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.#NEWLINE#            find_spell_target)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        self.target.die(self)#NEWLINE#        player.hero.heal(player.effective_heal_power(2), self)
