class Archmage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Archmage ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 7 , spell_damage = 1 )
class Bluegill Warrior ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Booty Bay Bodyguard ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 4 , windfury = True )
class Coldlight Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Darkscale Healer ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 5 , deathrattle = Battlecry ( Draw ( ) , Player Selector ( ) ) )
class Wisps5 ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fiery War Axe ` , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , overload = 2 ) def create_weapon ( self , player ) : return Weapon ( 3 , 2 )
class Coldlight Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frostwolf Warlord ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Gain ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )
class Hellfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hellfire ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self )
class Innervate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Innervate ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . add_buff ( Buff ( Frozen ( ) ) )
class Bluegill Warrior ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Magma Rager ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 5 , 1 )
class Wisps5 ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mortal Coil ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self ) self . target . add_effect ( Effect ( Turn Ended ( player = Current Player ( ) ) , Action Tag ( Kill ( ) , Self Selector ( ) ) ) )
class Polymorph ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Polymorph ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self ) self . target . increase_health ( 2 )
class Worthless Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Searing Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 1 , 1 )
class Bluegill Warrior ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silverback Patriarch ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 4 , taunt = True )
class Coldlight Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormwind Knight ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 5 , charge = True )
class Bluegill Warrior ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Voodoo Doctor ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 1 , deathrattle = Battlecry ( Heal ( 2 ) , Minion Selector ( players = Both Player ( ) ) ) , taunt = True )
class Worthless Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath of Air Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , spell_damage = 1 )
class Wisps5 ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Astral Communion ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for target in targets : target . heal ( player . effective_heal_power ( target . calculate_max_health ( ) ) , self )
class Annoy - o - Tron ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Annoy - o - Tron ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 2 , charge = True )
class Coldlight Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Burly Rockjaw Trogg ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Minion Summoned ( Is Type ( MINION_TYPE . MURLOC ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) , Effect ( Spell Cast ( Is Type ( MINION_TYPE . MURLOC ) ) , Action Tag ( Give ( Change Health ( 1 ) ) , Self Selector ( ) ) ) ] )
class Worthless Imp ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Cogmaster Wrench ` , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . EPIC ) def create_weapon ( self , player ) : return Weapon ( 1 , 3 , effects = [ Effect ( Character Attack ( Is Hero ( ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) , Effect ( Minion Summoned ( Is Type ( MINION_TYPE . BEAST ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) ] )
class Wisps5 ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Echo of Medivh ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( player . minions ) for target in targets : minion . heal ( player . effective_heal_power ( target . calculate_max_health ( ) ) , self )
class Grimscale Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Floating Watcher ` , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Minion Died ( player = Both Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )
class Coldlight Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnomish Experimenter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Minion Selector ( picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )
class Coldlight Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Iron Juggernaut ` , 6 , CHARACTER_CLASS . ROGUE , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) , Greater Than ( Count ( Card Selector ( ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 5 )
class Coldlight Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Madder Bomber ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 6 ) , Character Selector ( players = Both Player ( ) , picker = Random Picker ( 6 ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )
class Mini - Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mini - Mage ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 4 , 1 , buffs = [ Buff ( Change Attack ( 1 ) ) ] )
class Coldlight Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Piloted Sky Golem ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 6 , 4 , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Mana Cost ( 2 ) , Is Minion ( ) ] ) ) , Player Selector ( ) ) )
class Druid Of The Flame ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Scarlet Purifier ` , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 2 ) , Character Selector ( None , Enemy Player ( ) , Random Picker ( 2 ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )
class Blood Fury ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Siltfin Spiritwalker ` , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 5 , effects = [ Effect ( Minion Summoned ( Is Type ( MINION_TYPE . BEAST ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) , Effect ( Minion Died ( Is Type ( MINION_TYPE . BEAST ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )
class Grimscale Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tinkertown Technician ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 3 , deathrattle = Battlecry ( Damage ( 3 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) )
class Voljin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Voljin ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Self Selector ( ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 2 )
class Worthless Imp ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Death Bite ` , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) def create_weapon ( self , player ) : return Weapon ( 4 , 2 , deathrattle = Deathrattle ( Damage ( 1 ) , Character Selector ( None , picker = Random Picker ( ) ) ) )
class Maexxna ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Maexxna ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 2 , 8 , effects = [ Effect ( Spell Cast ( Is Type ( MINION_TYPE . MECH ) ) , Action Tag ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Self Selector ( ) ) ) ] )
class Coldlight Seer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sludge Belcher ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 5 , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Mana Cost ( 2 ) , Is Minion ( ) ] ) ) , Player Selector ( ) ) )
class Voidcaller ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Voidcaller ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 3 , 4 , deathrattle = Deathrattle ( Add Card ( Card Query ( conditions = [ Is Type ( MINION_TYPE . BEAST ) ] ) ) , Player Selector ( ) ) )
class Alexstrasza ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Alexstrasza ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Set ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 8 , 8 )
class Coldlight Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Is Type ( MINION_TYPE . MECH ) , Action Tag ( Draw ( ) , Player Selector ( Enemy Player ( ) ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 )
class Coldlight Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Baine Bloodhoof ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 5 )
class Wisps5 ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blade Flurry ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . damage ( player . effective_spell_damage ( minion . calculate_attack ( ) ) , self ) player . draw ( )
class Brawl ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Brawl ` , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : minion . die ( self )
class Conceal ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Conceal ` , 1 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in copy . copy ( game . other_player . minions ) : minion . add_buff ( Buff ( Frozen ( ) ) )
class Defender ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Defender ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 1 )
class Doomguard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Doomguard ` , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 5 , 7 , deathrattle = [ Deathrattle ( Add Card ( Card Query ( conditions = [ Is Type ( MINION_TYPE . MECH ) ] ) ) , Player Selector ( ) ) ] )
class Worthless Imp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Earth Elemental ` , 5 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 7 , 8 , auras = [ Aura ( Taunt ( ) , Player Selector ( ) ) , Deathrattle ( Remove ( ) , Self Selector ( ) ) ] )
class Worthless Imp ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Explosive Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( target , Minion ) : minion . damage ( player . effective_spell_damage ( 2 ) , self ) player . hand . append ( new_minon ) attacker . player . add_buff ( Buff ( Mana Change ( - 2 ) ) ) super ( ) . reveal ( )
class Coldlight Seer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame of Azzinoth ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 1 )
class Gnoll ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnoll ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 2 , taunt = True )
class Wisps5 ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Wrath ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( player . minions ) for minion in targets : minion . damage ( player . effective_spell_damage ( minion . calculate_max_health ( ) ) , self )
class Infernal ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Infernal ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 6 , 6 )
class Druid Of The Flame ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kirin Tor Mage ` , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 4 , 3 , deathrattle = Battlecry ( The ( CARD_SOURCE . health ) , Player Selector ( ) ) )
class Lightwarden ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightwarden ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ Effect ( Spell Cast ( Is Type ( MINION_TYPE . MECH ) ) , Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ) ] )
class Coldlight Seer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Wraith ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 2 , auras = [ Aura ( Change Attack ( 2 ) , Minion Selector ( ) ) ] )
class Misdirection ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misdirection ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : minion . die ( self ) def can_use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > = 1
class Worthless Imp ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Noble Sacrifice ` , 1 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) def _reveal ( self , attacker , target ) : if isinstance ( target , Minion ) : target . add_buff ( Buff ( Frozen ( ) ) ) super ( ) . reveal ( )
class Wisps5 ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Power the Wild ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . change_attack ( 4 ) self . target . increase_health ( 4 )
class Redemption ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Redemption ` , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) self . player = None def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) self . player = player def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal ) self . player = None def _reveal ( self , minion , index ) : if isinstance ( attacker , Minion ) and not c . drawn : super ( ) . reveal ( ) def activate ( self , player ) : player . bind ( ` minion_died ` , self . _reveal ) def deactivate ( self , player ) : player . unbind ( ` minion_died ` , self . _reveal )
class Wisps5 ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Madness ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . calculate_attack ( ) > = 3 and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )
class Wisps5 ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Siphon Soul ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self ) player . hero . heal ( player . effective_heal_power ( 3 ) , self ) player . hero . heal ( player . effective_heal_power ( 3 ) , self )
class Spellbender ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spellbender ` , 0 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 3 )
class Grimscale Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Summoning Portal ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Give ( Buff ( Change Attack ( 2 ) ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 0 , 4 )
class Coldlight Seer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Thrallmar Farseer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , charge = True )
class Wisps5 ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Upgrade ! ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( game . current_player . minions ) for minion in targets : minion . die ( self )
class Wisp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wisp ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 1 )
class Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Black ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 2 , 1 )
class Coldlight Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragonkin Sorcerer ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 3 , 5 , buffs = [ Buff ( Change Attack ( 3 ) , Greater Than ( Count ( Weapon Selector ( Enemy Player ( ) ) ) , value = 0 ) ) ] )
class Grimscale Oracle ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hungry Dragon ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Summon ( Attribute ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )
class Wisps5 ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Solemn Vigil ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self ) player . hero . heal ( player . effective_heal_power ( 2 ) , self )
