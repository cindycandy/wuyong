class Archmage(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Archmage', 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON#NEWLINE#            )#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 7, deathrattle=Deathrattle(Summon(Thaddius()),#NEWLINE#            PlayerSelector(), InGraveyard(Stalagg())))
class DruidOfTheFlame(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Booty Bay', 4, CHARACTER_CLASS.ALL, CARD_RARITY.#NEWLINE#            COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(5, 4, deathrattle=Deathrattle(Summon(Thaddius()),#NEWLINE#            PlayerSelector(), InGraveyard(Stalagg())))
class DruidOfTheFlame(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Darkscale Healer', 5, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 5, effects=[Effect(SpellCast(player=BothPlayer()),#NEWLINE#            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])
class DruidOfTheFlame(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Fiery War', 2, CHARACTER_CLASS.ALL, CARD_RARITY.#NEWLINE#            COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(3, 3, deathrattle=Deathrattle(Summon(Thaddius()),#NEWLINE#            PlayerSelector(), InGraveyard(Stalagg())))
class DruidOfTheFlame(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Frostwolf Warlord', 5, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 4, effects=[Effect(SpellCast(player=BothPlayer()),#NEWLINE#            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])
class Hellfire(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Hellfire', 4, CHARACTER_CLASS.DRUID, CARD_RARITY.#NEWLINE#            COMMON)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        targets = copy.copy(game.other_player.minions)#NEWLINE#        targets.extend(game.current_player.minions)#NEWLINE#        for minion in targets:#NEWLINE#            minion.damage(player.effective_spell_damage(2), self)
class Innervate(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Innervate', 0, CHARACTER_CLASS.MAGE, CARD_RARITY.#NEWLINE#            COMMON)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        targets = copy.copy(game.other_player.minions)#NEWLINE#        targets.extend(game.current_player.minions)#NEWLINE#        for minion in targets:#NEWLINE#            minion.damage(player.effective_spell_damage(2), self)
class DruidOfTheFlame(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Magma Rager', 3, CHARACTER_CLASS.ALL, CARD_RARITY#NEWLINE#            .COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(5, 1, deathrattle=Deathrattle(Summon(Thaddius()),#NEWLINE#            PlayerSelector(), InGraveyard(Stalagg())))
class DruidOfTheFlame(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Mortal Coil', 1, CHARACTER_CLASS.SHAMAN,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        for minion in copy.copy(game.other_player.minions):#NEWLINE#            minion.damage(player.effective_spell_damage(2), self)#NEWLINE#        game.other_player.hero.damage(player.effective_spell_damage(2), self)
class Polymorph(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Polymorph', 4, CHARACTER_CLASS.DRUID, CARD_RARITY#NEWLINE#            .COMMON)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        targets = copy.copy(game.other_player.minions)#NEWLINE#        targets.extend(game.current_player.minions)#NEWLINE#        for minion in targets:#NEWLINE#            minion.damage(player.effective_spell_damage(2), self)
class DruidOfTheFlame(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Searing Totem', 1, CHARACTER_CLASS.SHAMAN,#NEWLINE#            CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(1, 1)
class DruidOfTheFlame(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Silverback Patriarch', 3, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(1, 4, effects=[Effect(SpellCast(player=BothPlayer()),#NEWLINE#            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])
class DruidOfTheFlame(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Stormwind Knight', 4, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 5, effects=[Effect(SpellCast(player=BothPlayer()),#NEWLINE#            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])
class DruidOfTheFlame(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Voodoo Doctor', 1, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 1, effects=[Effect(SpellCast(player=BothPlayer()),#NEWLINE#            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])
class DruidOfTheFlame(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Astral Communion', 4, CHARACTER_CLASS.SHAMAN,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        for minion in copy.copy(game.other_player.minions):#NEWLINE#            minion.damage(player.effective_spell_damage(2), self)#NEWLINE#        game.other_player.hero.damage(player.effective_spell_damage(2), self)
class Annoy-o-Tron(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Annoy-o-Tron', 2, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(1, 2, deathrattle=Deathrattle(Summon(Thaddius()),#NEWLINE#            PlayerSelector(), InGraveyard(Stalagg())))
class DruidOfTheFlame(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Burly Rockjaw', 4, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(3, 5, effects=[Effect(SpellCast(player=BothPlayer()),#NEWLINE#            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])
class DruidOfTheFlame(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__("Cogmaster 's", 3, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(1, 3, effects=[Effect(SpellCast(player=BothPlayer()),#NEWLINE#            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])
class DruidOfTheFlame(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Echo of Medivh', 4, CHARACTER_CLASS.PALADIN,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        targets = copy.copy(game.other_player.minions)#NEWLINE#        targets.extend(game.current_player.minions)#NEWLINE#        for minion in targets:#NEWLINE#            minion.damage(player.effective_spell_damage(1), self)
class DruidOfTheFlame(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Floating Watcher', 5, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 4, effects=[Effect(SpellCast(player=BothPlayer()),#NEWLINE#            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])
class DruidOfTheFlame(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Gnomish Experimenter', 3, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(3, 2, effects=[Effect(SpellCast(player=BothPlayer()),#NEWLINE#            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])
class DruidOfTheFlame(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Iron Juggernaut', 6, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(6, 5, effects=[Effect(SpellCast(player=BothPlayer()),#NEWLINE#            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])
class DruidOfTheFlame(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Madder Bomber', 5, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(5, 4, effects=[Effect(SpellCast(player=BothPlayer()),#NEWLINE#            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])
class Mini-Mage(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Mini-Mage', 4, CHARACTER_CLASS.ALL, CARD_RARITY.#NEWLINE#            COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 1, deathrattle=Deathrattle(Summon(Thaddius()),#NEWLINE#            PlayerSelector(), InGraveyard(Stalagg())))
class DruidOfTheFlame(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Piloted Sky', 6, CHARACTER_CLASS.ALL, CARD_RARITY#NEWLINE#            .COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(6, 4, deathrattle=Deathrattle(Summon(Thaddius()),#NEWLINE#            PlayerSelector(), InGraveyard(Stalagg())))
class DruidOfTheFlame(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Scarlet Purifier', 3, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 3, effects=[Effect(SpellCast(player=BothPlayer()),#NEWLINE#            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])
class DruidOfTheFlame(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Siltfin Spiritwalker', 4, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 5, effects=[Effect(SpellCast(player=BothPlayer()),#NEWLINE#            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])
class DruidOfTheFlame(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Tinkertown Technician', 3, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(3, 3, effects=[Effect(SpellCast(player=BothPlayer()),#NEWLINE#            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])
class Voljin(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Voljin', 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(6, 2, deathrattle=Deathrattle(Summon(Thaddius()),#NEWLINE#            PlayerSelector(), InGraveyard(Stalagg())))
class DruidOfTheFlame(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__("Death 's", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON#NEWLINE#            )#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 4, deathrattle=Deathrattle(Summon(Thaddius()),#NEWLINE#            PlayerSelector(), InGraveyard(Stalagg())))
class Maexxna(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Maexxna', 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 8, deathrattle=Deathrattle(Summon(Thaddius()),#NEWLINE#            PlayerSelector(), InGraveyard(Stalagg())))
class DruidOfTheFlame(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Sludge Belcher', 5, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(3, 5, effects=[Effect(SpellCast(player=BothPlayer()),#NEWLINE#            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])
class Voidcaller(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Voidcaller', 4, CHARACTER_CLASS.ALL, CARD_RARITY.#NEWLINE#            COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(3, 4, deathrattle=Deathrattle(Summon(Thaddius()),#NEWLINE#            PlayerSelector(), InGraveyard(Stalagg())))
class Alexstrasza(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Alexstrasza', 9, CHARACTER_CLASS.ALL, CARD_RARITY#NEWLINE#            .COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(8, 8, deathrattle=Deathrattle(Summon(Thaddius()),#NEWLINE#            PlayerSelector(), InGraveyard(Stalagg())))
class DruidOfTheFlame(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Arcane Golem', 3, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 2, deathrattle=Deathrattle(Summon(Thaddius()),#NEWLINE#            PlayerSelector(), InGraveyard(Stalagg())))
class DruidOfTheFlame(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Baine Bloodhoof', 4, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 5, effects=[Effect(SpellCast(player=BothPlayer()),#NEWLINE#            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])
class DruidOfTheFlame(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Blade Flurry', 2, CHARACTER_CLASS.SHAMAN,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        for minion in copy.copy(game.other_player.minions):#NEWLINE#            minion.damage(player.effective_spell_damage(2), self)#NEWLINE#        game.other_player.hero.damage(player.effective_spell_damage(2), self)
class Brawl(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Brawl', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        targets = copy.copy(game.other_player.minions)#NEWLINE#        targets.extend(game.current_player.minions)#NEWLINE#        for minion in targets:#NEWLINE#            minion.damage(player.effective_spell_damage(2), self)
class Conceal(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Conceal', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.#NEWLINE#            COMMON)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        targets = copy.copy(game.other_player.minions)#NEWLINE#        targets.extend(game.current_player.minions)#NEWLINE#        for minion in targets:#NEWLINE#            minion.damage(player.effective_spell_damage(2), self)
class Defender(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Defender', 1, CHARACTER_CLASS.ALL, CARD_RARITY.#NEWLINE#            COMMON, minion_type=MINION_TYPE.BEAST)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 1)
class Doomguard(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Doomguard', 5, CHARACTER_CLASS.ALL, CARD_RARITY.#NEWLINE#            COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(5, 7, deathrattle=Deathrattle(Summon(Thaddius()),#NEWLINE#            PlayerSelector(), InGraveyard(Stalagg())))
class DruidOfTheFlame(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Earth Elemental', 5, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(7, 8, effects=[Effect(SpellCast(player=BothPlayer()),#NEWLINE#            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])
class DruidOfTheFlame(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Explosive Trap', 2, CHARACTER_CLASS.MAGE,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        for minion in copy.copy(game.other_player.minions):#NEWLINE#            minion.damage(player.effective_spell_damage(2), self)#NEWLINE#        game.other_player.hero.damage(player.effective_spell_damage(2), self)
class DruidOfTheFlame(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Flame of Azzinoth', 1, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 1, deathrattle=Deathrattle(Summon(Thaddius()),#NEWLINE#            PlayerSelector(), InGraveyard(Stalagg())))
class Gnoll(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Gnoll', 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 2, deathrattle=Deathrattle(Summon(Thaddius()),#NEWLINE#            PlayerSelector(), InGraveyard(Stalagg())))
class DruidOfTheFlame(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Holy Wrath', 5, CHARACTER_CLASS.HUNTER,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        for minion in copy.copy(game.other_player.minions):#NEWLINE#            minion.damage(player.effective_spell_damage(2), self)#NEWLINE#        player.draw()
class Infernal(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Infernal', 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON#NEWLINE#            )#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(6, 6, deathrattle=Deathrattle(Summon(Thaddius()),#NEWLINE#            PlayerSelector(), InGraveyard(Stalagg())))
class Lightwarden(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Lightwarden', 1, CHARACTER_CLASS.ALL, CARD_RARITY#NEWLINE#            .COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(1, 2, deathrattle=Deathrattle(Summon(Thaddius()),#NEWLINE#            PlayerSelector(), InGraveyard(Stalagg())))
class DruidOfTheFlame(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Mana Wraith Wraith', 2, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 2, deathrattle=Deathrattle(Summon(Thaddius()),#NEWLINE#            PlayerSelector(), InGraveyard(Stalagg())))
class Misdirection(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Misdirection', 2, CHARACTER_CLASS.DRUID,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        targets = copy.copy(game.other_player.minions)#NEWLINE#        targets.extend(game.current_player.minions)#NEWLINE#        for minion in targets:#NEWLINE#            minion.damage(player.effective_spell_damage(2), self)
class DruidOfTheFlame(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Noble Sacrifice', 1, CHARACTER_CLASS.SHAMAN,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        for minion in copy.copy(game.other_player.minions):#NEWLINE#            minion.damage(player.effective_spell_damage(2), self)#NEWLINE#        game.other_player.hero.damage(player.effective_spell_damage(2), self)
class DruidOfTheFlame(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Power of the Wild', 2, CHARACTER_CLASS.DRUID,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        for minion in copy.copy(game.other_player.minions):#NEWLINE#            minion.damage(player.effective_spell_damage(2), self)#NEWLINE#        player.draw()
class Redemption(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Redemption', 1, CHARACTER_CLASS.DRUID,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        targets = copy.copy(game.other_player.minions)#NEWLINE#        targets.extend(game.current_player.minions)#NEWLINE#        for minion in targets:#NEWLINE#            minion.damage(player.effective_spell_damage(2), self)
class DruidOfTheFlame(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Shadow Madness', 4, CHARACTER_CLASS.SHAMAN,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        targets = copy.copy(game.other_player.minions)#NEWLINE#        targets.extend(game.current_player.minions)#NEWLINE#        for minion in targets:#NEWLINE#            minion.damage(player.effective_spell_damage(1), self)
class DruidOfTheFlame(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Siphon Soul', 6, CHARACTER_CLASS.PRIEST,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        for minion in copy.copy(game.other_player.minions):#NEWLINE#            minion.damage(player.effective_spell_damage(2), self)#NEWLINE#        game.other_player.hero.damage(player.effective_spell_damage(2), self)
class Spellbender(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Spellbender', 0, CHARACTER_CLASS.ALL, CARD_RARITY#NEWLINE#            .COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(1, 3, deathrattle=Deathrattle(Summon(Thaddius()),#NEWLINE#            PlayerSelector(), InGraveyard(Stalagg())))
class DruidOfTheFlame(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Summoning Portal', 4, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(0, 4, effects=[Effect(SpellCast(player=BothPlayer()),#NEWLINE#            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])
class DruidOfTheFlame(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Thrallmar Farseer', 3, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 3, effects=[Effect(SpellCast(player=BothPlayer()),#NEWLINE#            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])
class DruidOfTheFlame(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Upgrade !', 1, CHARACTER_CLASS.SHAMAN,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        for minion in copy.copy(game.other_player.minions):#NEWLINE#            minion.damage(player.effective_spell_damage(2), self)#NEWLINE#        game.other_player.hero.damage(player.effective_spell_damage(2), self)
class Wisp(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Wisp', 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(1, 1, deathrattle=Deathrattle(Summon(Thaddius()),#NEWLINE#            PlayerSelector(), InGraveyard(Stalagg())))
class Black(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Black Whelp', 1, CHARACTER_CLASS.ALL, CARD_RARITY#NEWLINE#            .COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 1, deathrattle=Deathrattle(Summon(Thaddius()),#NEWLINE#            PlayerSelector(), InGraveyard(Stalagg())))
class DruidOfTheFlame(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Dragonkin Sorcerer', 4, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(3, 5, effects=[Effect(SpellCast(player=BothPlayer()),#NEWLINE#            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])
class DruidOfTheFlame(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Hungry Dragon', 4, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(5, 6, effects=[Effect(SpellCast(player=BothPlayer()),#NEWLINE#            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])
class DruidOfTheFlame(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Solemn Vigil', 5, CHARACTER_CLASS.MAGE,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        for minion in copy.copy(game.other_player.minions):#NEWLINE#            minion.damage(player.effective_spell_damage(2), self)#NEWLINE#        game.other_player.hero.damage(player.effective_spell_damage(2), self)
