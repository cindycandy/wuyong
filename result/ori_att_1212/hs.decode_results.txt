------------------------------------------------------------
example_id: 535
intent: 
Darkscale Healer NAME_END 4 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END < b > Battlecry : < /b > Restore 2 Health to all friendly characters .
canonicalized reference: 
class DarkscaleHealer(MinionCard):

    def __init__(self):
        super().__init__('Darkscale Healer', 5, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, battlecry=Battlecry(Heal(2),
            CharacterSelector()))

    def create_minion(self, player):
        return Minion(4, 5)
canonicalized prediction: 
class Darkscale(MinionCard):

    def __init__(self):
        super().__init__('Darkscale Healer', 5, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
reference code for bleu calculation: 
class DarkscaleHealer(MinionCard):

    def __init__(self):
        super().__init__('Darkscale Healer', 5, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, battlecry=Battlecry(Heal(2),
            CharacterSelector()))

    def create_minion(self, player):
        return Minion(4, 5)
predicted code for bleu calculation: 
class Darkscale(MinionCard):

    def __init__(self):
        super().__init__('Darkscale Healer', 5, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
pred_shorter_than_ref: False
weired: False
------------------------------------------------------------
------------------------------------------------------------
example_id: 537
intent: 
Frostwolf Warlord NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END < b > Battlecry : < /b > Gain +1/+1 for each other friendly minion on the battlefield .
canonicalized reference: 
class FrostwolfWarlord(MinionCard):

    def __init__(self):
        super().__init__('Frostwolf Warlord', 5, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack
            (Count(MinionSelector()))), Buff(ChangeHealth(Count(
            MinionSelector())))]), SelfSelector()))

    def create_minion(self, player):
        return Minion(4, 4)
canonicalized prediction: 
class Frostwolf(MinionCard):

    def __init__(self):
        super().__init__('Frostwolf Warlord', 5, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(4, 4)
reference code for bleu calculation: 
class FrostwolfWarlord(MinionCard):

    def __init__(self):
        super().__init__('Frostwolf Warlord', 5, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack
            (Count(MinionSelector()))), Buff(ChangeHealth(Count(
            MinionSelector())))]), SelfSelector()))

    def create_minion(self, player):
        return Minion(4, 4)
predicted code for bleu calculation: 
class Frostwolf(MinionCard):

    def __init__(self):
        super().__init__('Frostwolf Warlord', 5, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(4, 4)
pred_shorter_than_ref: True
weired: False
------------------------------------------------------------
------------------------------------------------------------
example_id: 540
intent: 
Magma Rager NAME_END 5 ATK_END 1 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END NIL
canonicalized reference: 
class MagmaRager(MinionCard):

    def __init__(self):
        super().__init__('Magma Rager', 3, CHARACTER_CLASS.ALL, CARD_RARITY
            .FREE)

    def create_minion(self, player):
        return Minion(5, 1)
canonicalized prediction: 
class Magma(MinionCard):

    def __init__(self):
        super().__init__('Magma Rager', 3, CHARACTER_CLASS.ALL, CARD_RARITY
            .COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(5, 1)
reference code for bleu calculation: 
class MagmaRager(MinionCard):

    def __init__(self):
        super().__init__('Magma Rager', 3, CHARACTER_CLASS.ALL, CARD_RARITY
            .FREE)

    def create_minion(self, player):
        return Minion(5, 1)
predicted code for bleu calculation: 
class Magma(MinionCard):

    def __init__(self):
        super().__init__('Magma Rager', 3, CHARACTER_CLASS.ALL, CARD_RARITY
            .COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(5, 1)
pred_shorter_than_ref: False
weired: False
------------------------------------------------------------
------------------------------------------------------------
example_id: 541
intent: 
Mortal Coil NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $ 1 damage to a minion . If that kills it , draw a card .
canonicalized reference: 
class MortalCoil(SpellCard):

    def __init__(self):
        super().__init__('Mortal Coil', 1, CHARACTER_CLASS.WARLOCK,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        if self.target.health <= player.effective_spell_damage(1
            ) and not self.target.divine_shield:
            self.target.damage(player.effective_spell_damage(1), self)
            player.draw()
        else:
            self.target.damage(player.effective_spell_damage(1), self)
canonicalized prediction: 
class Mortal(MinionCard):

    def __init__(self):
        super().__init__('Mortal Coil', 1, CHARACTER_CLASS.ALL, CARD_RARITY
            .COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
reference code for bleu calculation: 
class MortalCoil(SpellCard):

    def __init__(self):
        super().__init__('Mortal Coil', 1, CHARACTER_CLASS.WARLOCK,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        if self.target.health <= player.effective_spell_damage(1
            ) and not self.target.divine_shield:
            self.target.damage(player.effective_spell_damage(1), self)
            player.draw()
        else:
            self.target.damage(player.effective_spell_damage(1), self)
predicted code for bleu calculation: 
class Mortal(MinionCard):

    def __init__(self):
        super().__init__('Mortal Coil', 1, CHARACTER_CLASS.ALL, CARD_RARITY
            .COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
pred_shorter_than_ref: True
weired: False
------------------------------------------------------------
------------------------------------------------------------
example_id: 543
intent: 
Searing Totem NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Free RARITY_END NIL
canonicalized reference: 
class SearingTotem(MinionCard):

    def __init__(self):
        super().__init__('Searing Totem', 1, CHARACTER_CLASS.SHAMAN,
            CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)

    def create_minion(self, player):
        return Minion(1, 1)
canonicalized prediction: 
class Searing(MinionCard):

    def __init__(self):
        super().__init__('Searing Totem', 1, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(1, 1)
reference code for bleu calculation: 
class SearingTotem(MinionCard):

    def __init__(self):
        super().__init__('Searing Totem', 1, CHARACTER_CLASS.SHAMAN,
            CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)

    def create_minion(self, player):
        return Minion(1, 1)
predicted code for bleu calculation: 
class Searing(MinionCard):

    def __init__(self):
        super().__init__('Searing Totem', 1, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(1, 1)
pred_shorter_than_ref: True
weired: False
------------------------------------------------------------
------------------------------------------------------------
example_id: 544
intent: 
Silverback Patriarch NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END < b > Taunt < /b >
canonicalized reference: 
class SilverbackPatriarch(MinionCard):

    def __init__(self):
        super().__init__('Silverback Patriarch', 3, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(1, 4, taunt=True)
canonicalized prediction: 
class Silverback(MinionCard):

    def __init__(self):
        super().__init__('Silverback Patriarch', 3, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
reference code for bleu calculation: 
class SilverbackPatriarch(MinionCard):

    def __init__(self):
        super().__init__('Silverback Patriarch', 3, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(1, 4, taunt=True)
predicted code for bleu calculation: 
class Silverback(MinionCard):

    def __init__(self):
        super().__init__('Silverback Patriarch', 3, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
pred_shorter_than_ref: False
weired: False
------------------------------------------------------------
------------------------------------------------------------
example_id: 545
intent: 
Stormwind Knight NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END < b > Charge < /b >
canonicalized reference: 
class StormwindKnight(MinionCard):

    def __init__(self):
        super().__init__('Stormwind Knight', 4, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(2, 5, charge=True)
canonicalized prediction: 
class Stormwind(MinionCard):

    def __init__(self):
        super().__init__('Stormwind Knight', 4, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
reference code for bleu calculation: 
class StormwindKnight(MinionCard):

    def __init__(self):
        super().__init__('Stormwind Knight', 4, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(2, 5, charge=True)
predicted code for bleu calculation: 
class Stormwind(MinionCard):

    def __init__(self):
        super().__init__('Stormwind Knight', 4, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
pred_shorter_than_ref: False
weired: False
------------------------------------------------------------
------------------------------------------------------------
example_id: 546
intent: 
Voodoo Doctor NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END < b > Battlecry : < /b > Restore 2 Health .
canonicalized reference: 
class VoodooDoctor(MinionCard):

    def __init__(self):
        super().__init__('Voodoo Doctor', 1, CHARACTER_CLASS.ALL,
            CARD_RARITY.FREE, battlecry=Battlecry(Heal(2),
            CharacterSelector(players=BothPlayer(), picker=UserPicker())))

    def create_minion(self, player):
        return Minion(2, 1)
canonicalized prediction: 
class Voodoo(MinionCard):

    def __init__(self):
        super().__init__('Voodoo Doctor', 1, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
reference code for bleu calculation: 
class VoodooDoctor(MinionCard):

    def __init__(self):
        super().__init__('Voodoo Doctor', 1, CHARACTER_CLASS.ALL,
            CARD_RARITY.FREE, battlecry=Battlecry(Heal(2),
            CharacterSelector(players=BothPlayer(), picker=UserPicker())))

    def create_minion(self, player):
        return Minion(2, 1)
predicted code for bleu calculation: 
class Voodoo(MinionCard):

    def __init__(self):
        super().__init__('Voodoo Doctor', 1, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
pred_shorter_than_ref: True
weired: False
------------------------------------------------------------
------------------------------------------------------------
example_id: 548
intent: 
Astral Communion NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END Gain 10 Mana Crystals . Discard your hand .
canonicalized reference: 
class AstralCommunion(SpellCard):

    def __init__(self):
        super().__init__('Astral Communion', 4, CHARACTER_CLASS.DRUID,
            CARD_RARITY.EPIC)

    def use(self, player, game):
        super().use(player, game)
        for card in player.hand:
            card.unattach()
            player.trigger('card_discarded', card)
        player.hand = []
        player.max_mana = 10
        player.mana = 10
canonicalized prediction: 
class Astral(MinionCard):

    def __init__(self):
        super().__init__('Astral Communion', 4, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
reference code for bleu calculation: 
class AstralCommunion(SpellCard):

    def __init__(self):
        super().__init__('Astral Communion', 4, CHARACTER_CLASS.DRUID,
            CARD_RARITY.EPIC)

    def use(self, player, game):
        super().use(player, game)
        for card in player.hand:
            card.unattach()
            player.trigger('card_discarded', card)
        player.hand = []
        player.max_mana = 10
        player.mana = 10
predicted code for bleu calculation: 
class Astral(MinionCard):

    def __init__(self):
        super().__init__('Astral Communion', 4, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
pred_shorter_than_ref: True
weired: False
------------------------------------------------------------
------------------------------------------------------------
example_id: 553
intent: 
Floating Watcher NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END Whenever your hero takes damage on your turn , gain +2/+2 .
canonicalized reference: 
class FloatingWatcher(MinionCard):

    def __init__(self):
        super().__init__('Floating Watcher', 5, CHARACTER_CLASS.WARLOCK,
            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON)

    def create_minion(self, player):
        return Minion(4, 4, effects=[Effect(CharacterDamaged(And(IsHero(),
            OwnersTurn())), ActionTag(Give([Buff(ChangeAttack(2)), Buff(
            ChangeHealth(2))]), SelfSelector()))])
canonicalized prediction: 
class Floating(MinionCard):

    def __init__(self):
        super().__init__('Floating Watcher', 5, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(4, 4)
reference code for bleu calculation: 
class FloatingWatcher(MinionCard):

    def __init__(self):
        super().__init__('Floating Watcher', 5, CHARACTER_CLASS.WARLOCK,
            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON)

    def create_minion(self, player):
        return Minion(4, 4, effects=[Effect(CharacterDamaged(And(IsHero(),
            OwnersTurn())), ActionTag(Give([Buff(ChangeAttack(2)), Buff(
            ChangeHealth(2))]), SelfSelector()))])
predicted code for bleu calculation: 
class Floating(MinionCard):

    def __init__(self):
        super().__init__('Floating Watcher', 5, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(4, 4)
pred_shorter_than_ref: True
weired: False
------------------------------------------------------------
------------------------------------------------------------
example_id: 554
intent: 
Gnomish Experimenter NAME_END 3 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END < b > Battlecry : < /b > Draw a card . If it 's a minion , transform it into a Chicken .
canonicalized reference: 
class GnomishExperimenter(MinionCard):

    def __init__(self):
        super().__init__('Gnomish Experimenter', 3, CHARACTER_CLASS.ALL,
            CARD_RARITY.RARE, battlecry=(Battlecry(Draw(), PlayerSelector()
            ), Battlecry(Transform(GnomishChicken()), LastDrawnSelector(),
            Matches(LastDrawnSelector(), IsMinion()))))

    def create_minion(self, player):
        return Minion(3, 2)
canonicalized prediction: 
class Gnomish(MinionCard):

    def __init__(self):
        super().__init__('Gnomish Experimenter', 3, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(3, 2)
reference code for bleu calculation: 
class GnomishExperimenter(MinionCard):

    def __init__(self):
        super().__init__('Gnomish Experimenter', 3, CHARACTER_CLASS.ALL,
            CARD_RARITY.RARE, battlecry=(Battlecry(Draw(), PlayerSelector()
            ), Battlecry(Transform(GnomishChicken()), LastDrawnSelector(),
            Matches(LastDrawnSelector(), IsMinion()))))

    def create_minion(self, player):
        return Minion(3, 2)
predicted code for bleu calculation: 
class Gnomish(MinionCard):

    def __init__(self):
        super().__init__('Gnomish Experimenter', 3, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(3, 2)
pred_shorter_than_ref: True
weired: False
------------------------------------------------------------
------------------------------------------------------------
example_id: 555
intent: 
Iron Juggernaut NAME_END 6 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END Mech RACE_END Legendary RARITY_END < b > Battlecry : < /b > Shuffle a Mine into your opponent 's deck . When drawn , it explodes for 10 damage .
canonicalized reference: 
class IronJuggernaut(MinionCard):

    def __init__(self):
        super().__init__('Iron Juggernaut', 6, CHARACTER_CLASS.WARRIOR,
            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH, battlecry=
            Battlecry(AddCard(BurrowingMine(), add_to_deck=True),
            PlayerSelector(EnemyPlayer())))

    def create_minion(self, player):
        return Minion(6, 5)
canonicalized prediction: 
class Iron(MinionCard):

    def __init__(self):
        super().__init__('Iron Juggernaut', 6, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(6, 5, effects=[Effect(TurnEnded(), ActionTag(Give(
            ChangeAttack(1)), SelfSelector()))])
reference code for bleu calculation: 
class IronJuggernaut(MinionCard):

    def __init__(self):
        super().__init__('Iron Juggernaut', 6, CHARACTER_CLASS.WARRIOR,
            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH, battlecry=
            Battlecry(AddCard(BurrowingMine(), add_to_deck=True),
            PlayerSelector(EnemyPlayer())))

    def create_minion(self, player):
        return Minion(6, 5)
predicted code for bleu calculation: 
class Iron(MinionCard):

    def __init__(self):
        super().__init__('Iron Juggernaut', 6, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(6, 5, effects=[Effect(TurnEnded(), ActionTag(Give(
            ChangeAttack(1)), SelfSelector()))])
pred_shorter_than_ref: True
weired: False
------------------------------------------------------------
------------------------------------------------------------
example_id: 556
intent: 
Madder Bomber NAME_END 5 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END < b > Battlecry : < /b > Deal 6 damage randomly split between all other characters .
canonicalized reference: 
class MadderBomber(MinionCard):

    def __init__(self):
        super().__init__('Madder Bomber', 5, CHARACTER_CLASS.ALL,
            CARD_RARITY.RARE, battlecry=Battlecry(Damage(1),
            CharacterSelector(players=BothPlayer(), picker=RandomPicker(6))))

    def create_minion(self, player):
        return Minion(5, 4)
canonicalized prediction: 
class Madder(MinionCard):

    def __init__(self):
        super().__init__('Madder Bomber', 5, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
reference code for bleu calculation: 
class MadderBomber(MinionCard):

    def __init__(self):
        super().__init__('Madder Bomber', 5, CHARACTER_CLASS.ALL,
            CARD_RARITY.RARE, battlecry=Battlecry(Damage(1),
            CharacterSelector(players=BothPlayer(), picker=RandomPicker(6))))

    def create_minion(self, player):
        return Minion(5, 4)
predicted code for bleu calculation: 
class Madder(MinionCard):

    def __init__(self):
        super().__init__('Madder Bomber', 5, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
pred_shorter_than_ref: True
weired: False
------------------------------------------------------------
------------------------------------------------------------
example_id: 559
intent: 
Scarlet Purifier NAME_END 4 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END < b > Battlecry < /b > : Deal 2 damage to all minions with < b > Deathrattle < /b > .
canonicalized reference: 
class ScarletPurifier(MinionCard):

    def __init__(self):
        super().__init__('Scarlet Purifier', 3, CHARACTER_CLASS.PALADIN,
            CARD_RARITY.RARE, battlecry=Battlecry(Damage(2), MinionSelector
            (MinionHasDeathrattle(), BothPlayer())))

    def create_minion(self, player):
        return Minion(4, 3)
canonicalized prediction: 
class Scarlet(MinionCard):

    def __init__(self):
        super().__init__('Scarlet Purifier', 3, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(4, 3)
reference code for bleu calculation: 
class ScarletPurifier(MinionCard):

    def __init__(self):
        super().__init__('Scarlet Purifier', 3, CHARACTER_CLASS.PALADIN,
            CARD_RARITY.RARE, battlecry=Battlecry(Damage(2), MinionSelector
            (MinionHasDeathrattle(), BothPlayer())))

    def create_minion(self, player):
        return Minion(4, 3)
predicted code for bleu calculation: 
class Scarlet(MinionCard):

    def __init__(self):
        super().__init__('Scarlet Purifier', 3, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(4, 3)
pred_shorter_than_ref: True
weired: False
------------------------------------------------------------
------------------------------------------------------------
example_id: 560
intent: 
Siltfin Spiritwalker NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Murloc RACE_END Epic RARITY_END Whenever another friendly Murloc dies , draw a card . < b > Overload < /b > : ( 1 )
canonicalized reference: 
class SiltfinSpiritwalker(MinionCard):

    def __init__(self):
        super().__init__('Siltfin Spiritwalker', 4, CHARACTER_CLASS.SHAMAN,
            CARD_RARITY.EPIC, minion_type=MINION_TYPE.MURLOC, overload=1)

    def create_minion(self, player):
        return Minion(2, 5, effects=[Effect(MinionDied(IsType(MINION_TYPE.
            MURLOC)), ActionTag(Draw(), PlayerSelector()))])
canonicalized prediction: 
class Siltfin(MinionCard):

    def __init__(self):
        super().__init__('Siltfin Spiritwalker', 4, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(2, 5)
reference code for bleu calculation: 
class SiltfinSpiritwalker(MinionCard):

    def __init__(self):
        super().__init__('Siltfin Spiritwalker', 4, CHARACTER_CLASS.SHAMAN,
            CARD_RARITY.EPIC, minion_type=MINION_TYPE.MURLOC, overload=1)

    def create_minion(self, player):
        return Minion(2, 5, effects=[Effect(MinionDied(IsType(MINION_TYPE.
            MURLOC)), ActionTag(Draw(), PlayerSelector()))])
predicted code for bleu calculation: 
class Siltfin(MinionCard):

    def __init__(self):
        super().__init__('Siltfin Spiritwalker', 4, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(2, 5)
pred_shorter_than_ref: True
weired: False
------------------------------------------------------------
------------------------------------------------------------
example_id: 561
intent: 
Tinkertown Technician NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END < b > Battlecry : < /b > If you have a Mech , gain +1/+1 and add a < b > Spare Part < /b > to your hand .
canonicalized reference: 
class TinkertownTechnician(MinionCard):

    def __init__(self):
        from hearthbreaker.cards.spells.neutral import spare_part_list
        super().__init__('Tinkertown Technician', 3, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, battlecry=(Battlecry(Give([Buff(
            ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector(),
            GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.MECH))),
            value=0)), Battlecry(AddCard(CardQuery(source=CARD_SOURCE.LIST,
            source_list=spare_part_list)), PlayerSelector(), GreaterThan(
            Count(MinionSelector(IsType(MINION_TYPE.MECH))), value=0))))

    def create_minion(self, player):
        return Minion(3, 3)
canonicalized prediction: 
class Tinkertown(MinionCard):

    def __init__(self):
        super().__init__('Tinkertown NAME_END', 3, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(3), self)
reference code for bleu calculation: 
class TinkertownTechnician(MinionCard):

    def __init__(self):
        from hearthbreaker.cards.spells.neutral import spare_part_list
        super().__init__('Tinkertown Technician', 3, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, battlecry=(Battlecry(Give([Buff(
            ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector(),
            GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.MECH))),
            value=0)), Battlecry(AddCard(CardQuery(source=CARD_SOURCE.LIST,
            source_list=spare_part_list)), PlayerSelector(), GreaterThan(
            Count(MinionSelector(IsType(MINION_TYPE.MECH))), value=0))))

    def create_minion(self, player):
        return Minion(3, 3)
predicted code for bleu calculation: 
class Tinkertown(MinionCard):

    def __init__(self):
        super().__init__('Tinkertown NAME_END', 3, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(3), self)
pred_shorter_than_ref: True
weired: False
------------------------------------------------------------
------------------------------------------------------------
example_id: 565
intent: 
Sludge Belcher NAME_END 3 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END < b > Taunt . NL Deathrattle : < /b > Summon a 1/2 Slime with < b > Taunt < /b > .
canonicalized reference: 
class SludgeBelcher(MinionCard):

    def __init__(self):
        super().__init__('Sludge Belcher', 5, CHARACTER_CLASS.ALL,
            CARD_RARITY.RARE)

    def create_minion(self, player):
        return Minion(3, 5, taunt=True, deathrattle=Deathrattle(Summon(
            Slime()), PlayerSelector()))
canonicalized prediction: 
class Sludge(MinionCard):

    def __init__(self):
        super().__init__('Sludge Belcher', 5, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
reference code for bleu calculation: 
class SludgeBelcher(MinionCard):

    def __init__(self):
        super().__init__('Sludge Belcher', 5, CHARACTER_CLASS.ALL,
            CARD_RARITY.RARE)

    def create_minion(self, player):
        return Minion(3, 5, taunt=True, deathrattle=Deathrattle(Summon(
            Slime()), PlayerSelector()))
predicted code for bleu calculation: 
class Sludge(MinionCard):

    def __init__(self):
        super().__init__('Sludge Belcher', 5, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
pred_shorter_than_ref: False
weired: False
------------------------------------------------------------
------------------------------------------------------------
example_id: 567
intent: 
Alexstrasza NAME_END 8 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END < b > Battlecry : < /b > Set a hero 's remaining Health to 15 .
canonicalized reference: 
class Alexstrasza(MinionCard):

    def __init__(self):
        super().__init__('Alexstrasza', 9, CHARACTER_CLASS.ALL, CARD_RARITY
            .LEGENDARY, minion_type=MINION_TYPE.DRAGON, battlecry=Battlecry
            (SetHealth(15), HeroSelector(players=BothPlayer(), picker=
            UserPicker())))

    def create_minion(self, player):
        return Minion(8, 8)
canonicalized prediction: 
class Alexstrasza(MinionCard):

    def __init__(self):
        super().__init__('Alexstrasza NAME_END', -1, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
reference code for bleu calculation: 
class Alexstrasza(MinionCard):

    def __init__(self):
        super().__init__('Alexstrasza', 9, CHARACTER_CLASS.ALL, CARD_RARITY
            .LEGENDARY, minion_type=MINION_TYPE.DRAGON, battlecry=Battlecry
            (SetHealth(15), HeroSelector(players=BothPlayer(), picker=
            UserPicker())))

    def create_minion(self, player):
        return Minion(8, 8)
predicted code for bleu calculation: 
class Alexstrasza(MinionCard):

    def __init__(self):
        super().__init__('Alexstrasza NAME_END', -1, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
pred_shorter_than_ref: True
weired: False
------------------------------------------------------------
------------------------------------------------------------
example_id: 568
intent: 
Arcane Golem NAME_END 4 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END < b > Charge < /b > . < b > Battlecry : < /b > Give your opponent a Mana Crystal .
canonicalized reference: 
class ArcaneGolem(MinionCard):

    def __init__(self):
        super().__init__('Arcane Golem', 3, CHARACTER_CLASS.ALL,
            CARD_RARITY.RARE, battlecry=Battlecry(GiveManaCrystal(),
            PlayerSelector(players=EnemyPlayer())))

    def create_minion(self, player):
        return Minion(4, 2, charge=True)
canonicalized prediction: 
class Arcane(MinionCard):

    def __init__(self):
        super().__init__('Arcane NAME_END', 3, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(4, 2, effects=[Effect(TurnEnded(), ActionTag(Give(
            ChangeAttack(1)), SelfSelector()))])
reference code for bleu calculation: 
class ArcaneGolem(MinionCard):

    def __init__(self):
        super().__init__('Arcane Golem', 3, CHARACTER_CLASS.ALL,
            CARD_RARITY.RARE, battlecry=Battlecry(GiveManaCrystal(),
            PlayerSelector(players=EnemyPlayer())))

    def create_minion(self, player):
        return Minion(4, 2, charge=True)
predicted code for bleu calculation: 
class Arcane(MinionCard):

    def __init__(self):
        super().__init__('Arcane NAME_END', 3, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(4, 2, effects=[Effect(TurnEnded(), ActionTag(Give(
            ChangeAttack(1)), SelfSelector()))])
pred_shorter_than_ref: False
weired: False
------------------------------------------------------------
------------------------------------------------------------
example_id: 569
intent: 
Baine Bloodhoof NAME_END 4 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL
canonicalized reference: 
class BaineBloodhoof(MinionCard):

    def __init__(self):
        super().__init__('Baine Bloodhoof', 4, CHARACTER_CLASS.ALL,
            CARD_RARITY.LEGENDARY, False)

    def create_minion(self, player):
        return Minion(4, 5)
canonicalized prediction: 
class Baine(MinionCard):

    def __init__(self):
        super().__init__('Baine Bloodhoof', 4, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(4, 5)
reference code for bleu calculation: 
class BaineBloodhoof(MinionCard):

    def __init__(self):
        super().__init__('Baine Bloodhoof', 4, CHARACTER_CLASS.ALL,
            CARD_RARITY.LEGENDARY, False)

    def create_minion(self, player):
        return Minion(4, 5)
predicted code for bleu calculation: 
class Baine(MinionCard):

    def __init__(self):
        super().__init__('Baine Bloodhoof', 4, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(4, 5)
pred_shorter_than_ref: False
weired: False
------------------------------------------------------------
------------------------------------------------------------
example_id: 570
intent: 
Blade Flurry NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END Destroy your weapon and deal its damage to all enemies .
canonicalized reference: 
class BladeFlurry(SpellCard):

    def __init__(self):
        super().__init__('Blade Flurry', 2, CHARACTER_CLASS.ROGUE,
            CARD_RARITY.RARE)

    def use(self, player, game):
        super().use(player, game)
        if player.weapon is not None:
            attack_power = player.effective_spell_damage(player.hero.
                calculate_attack())
            player.weapon.destroy()
            for minion in copy.copy(game.other_player.minions):
                minion.damage(attack_power, self)
            game.other_player.hero.damage(attack_power, self)
canonicalized prediction: 
class Blade(MinionCard):

    def __init__(self):
        super().__init__('Blade Flurry', 2, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
reference code for bleu calculation: 
class BladeFlurry(SpellCard):

    def __init__(self):
        super().__init__('Blade Flurry', 2, CHARACTER_CLASS.ROGUE,
            CARD_RARITY.RARE)

    def use(self, player, game):
        super().use(player, game)
        if player.weapon is not None:
            attack_power = player.effective_spell_damage(player.hero.
                calculate_attack())
            player.weapon.destroy()
            for minion in copy.copy(game.other_player.minions):
                minion.damage(attack_power, self)
            game.other_player.hero.damage(attack_power, self)
predicted code for bleu calculation: 
class Blade(MinionCard):

    def __init__(self):
        super().__init__('Blade Flurry', 2, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
pred_shorter_than_ref: True
weired: False
------------------------------------------------------------
------------------------------------------------------------
example_id: 574
intent: 
Doomguard NAME_END 5 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Rare RARITY_END < b > Charge < /b > . < b > Battlecry : < /b > Discard two random cards .
canonicalized reference: 
class Doomguard(MinionCard):

    def __init__(self):
        super().__init__('Doomguard', 5, CHARACTER_CLASS.WARLOCK,
            CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON, battlecry=
            Battlecry(Discard(amount=2), PlayerSelector()))

    def create_minion(self, player):
        return Minion(5, 7, charge=True)
canonicalized prediction: 
class Doomguard(MinionCard):

    def __init__(self):
        super().__init__('Doomguard NAME_END', -1, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
reference code for bleu calculation: 
class Doomguard(MinionCard):

    def __init__(self):
        super().__init__('Doomguard', 5, CHARACTER_CLASS.WARLOCK,
            CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON, battlecry=
            Battlecry(Discard(amount=2), PlayerSelector()))

    def create_minion(self, player):
        return Minion(5, 7, charge=True)
predicted code for bleu calculation: 
class Doomguard(MinionCard):

    def __init__(self):
        super().__init__('Doomguard NAME_END', -1, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
pred_shorter_than_ref: False
weired: False
------------------------------------------------------------
------------------------------------------------------------
example_id: 576
intent: 
Explosive Trap NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END < b > Secret : < /b > When your hero is attacked , deal $ 2 damage to all enemies .
canonicalized reference: 
class ExplosiveTrap(SecretCard):

    def __init__(self):
        super().__init__('Explosive Trap', 2, CHARACTER_CLASS.HUNTER,
            CARD_RARITY.COMMON)

    def activate(self, player):
        player.opponent.bind('character_attack', self._reveal)

    def deactivate(self, player):
        player.opponent.unbind('character_attack', self._reveal)

    def _reveal(self, attacker, target):
        if isinstance(target, Hero):
            game = attacker.player.game
            enemies = copy.copy(game.current_player.minions)
            enemies.append(game.current_player.hero)
            for enemy in enemies:
                enemy.damage(2, None)
            game.check_delayed()
            super().reveal()
canonicalized prediction: 
class Explosive(MinionCard):

    def __init__(self):
        super().__init__('Explosive Trap', 2, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
reference code for bleu calculation: 
class ExplosiveTrap(SecretCard):

    def __init__(self):
        super().__init__('Explosive Trap', 2, CHARACTER_CLASS.HUNTER,
            CARD_RARITY.COMMON)

    def activate(self, player):
        player.opponent.bind('character_attack', self._reveal)

    def deactivate(self, player):
        player.opponent.unbind('character_attack', self._reveal)

    def _reveal(self, attacker, target):
        if isinstance(target, Hero):
            game = attacker.player.game
            enemies = copy.copy(game.current_player.minions)
            enemies.append(game.current_player.hero)
            for enemy in enemies:
                enemy.damage(2, None)
            game.check_delayed()
            super().reveal()
predicted code for bleu calculation: 
class Explosive(MinionCard):

    def __init__(self):
        super().__init__('Explosive Trap', 2, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
pred_shorter_than_ref: True
weired: False
------------------------------------------------------------
------------------------------------------------------------
example_id: 578
intent: 
Gnoll NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END < b > Taunt < /b >
canonicalized reference: 
class Gnoll(MinionCard):

    def __init__(self):
        super().__init__('Gnoll', 2, CHARACTER_CLASS.ALL, CARD_RARITY.
            COMMON, False)

    def create_minion(self, player):
        return Minion(2, 2, taunt=True)
canonicalized prediction: 
class Gnoll(MinionCard):

    def __init__(self):
        super().__init__('Gnoll NAME_END', 2, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(2, 2)
reference code for bleu calculation: 
class Gnoll(MinionCard):

    def __init__(self):
        super().__init__('Gnoll', 2, CHARACTER_CLASS.ALL, CARD_RARITY.
            COMMON, False)

    def create_minion(self, player):
        return Minion(2, 2, taunt=True)
predicted code for bleu calculation: 
class Gnoll(MinionCard):

    def __init__(self):
        super().__init__('Gnoll NAME_END', 2, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(2, 2)
pred_shorter_than_ref: False
weired: False
------------------------------------------------------------
------------------------------------------------------------
example_id: 579
intent: 
Holy Wrath NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END Draw a card and deal damage equal to its cost .
canonicalized reference: 
class HolyWrath(SpellCard):

    def __init__(self):
        super().__init__('Holy Wrath', 5, CHARACTER_CLASS.PALADIN,
            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.
            find_spell_target)

    def use(self, player, game):
        super().use(player, game)
        fatigue = False
        if player.deck.left == 0:
            fatigue = True
        player.draw()
        if not fatigue:
            cost = player.hand[-1].mana
            self.target.damage(player.effective_spell_damage(cost), self)
canonicalized prediction: 
class Holy(MinionCard):

    def __init__(self):
        super().__init__('Holy Wrath', 5, CHARACTER_CLASS.ALL, CARD_RARITY.
            COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
reference code for bleu calculation: 
class HolyWrath(SpellCard):

    def __init__(self):
        super().__init__('Holy Wrath', 5, CHARACTER_CLASS.PALADIN,
            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.
            find_spell_target)

    def use(self, player, game):
        super().use(player, game)
        fatigue = False
        if player.deck.left == 0:
            fatigue = True
        player.draw()
        if not fatigue:
            cost = player.hand[-1].mana
            self.target.damage(player.effective_spell_damage(cost), self)
predicted code for bleu calculation: 
class Holy(MinionCard):

    def __init__(self):
        super().__init__('Holy Wrath', 5, CHARACTER_CLASS.ALL, CARD_RARITY.
            COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
pred_shorter_than_ref: True
weired: False
------------------------------------------------------------
------------------------------------------------------------
example_id: 580
intent: 
Infernal NAME_END 6 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END NIL
canonicalized reference: 
class Infernal(MinionCard):

    def __init__(self):
        super().__init__('Infernal', 6, CHARACTER_CLASS.WARLOCK,
            CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.DEMON)

    def create_minion(self, player):
        return Minion(6, 6)
canonicalized prediction: 
class Infernal(MinionCard):

    def __init__(self):
        super().__init__('Infernal NAME_END', -1, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(6, 6)
reference code for bleu calculation: 
class Infernal(MinionCard):

    def __init__(self):
        super().__init__('Infernal', 6, CHARACTER_CLASS.WARLOCK,
            CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.DEMON)

    def create_minion(self, player):
        return Minion(6, 6)
predicted code for bleu calculation: 
class Infernal(MinionCard):

    def __init__(self):
        super().__init__('Infernal NAME_END', -1, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(6, 6)
pred_shorter_than_ref: False
weired: False
------------------------------------------------------------
------------------------------------------------------------
example_id: 583
intent: 
Mana Wraith NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END ALL minions cost ( 1 ) more .
canonicalized reference: 
class ManaWraith(MinionCard):

    def __init__(self):
        super().__init__('Mana Wraith', 2, CHARACTER_CLASS.ALL, CARD_RARITY
            .RARE)

    def create_minion(self, player):
        return Minion(2, 2, auras=[Aura(ManaChange(1), CardSelector(
            BothPlayer(), IsMinion()))])
canonicalized prediction: 
class Mana(MinionCard):

    def __init__(self):
        super().__init__('Mana Wraith', 2, CHARACTER_CLASS.ALL, CARD_RARITY
            .COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(2, 2)
reference code for bleu calculation: 
class ManaWraith(MinionCard):

    def __init__(self):
        super().__init__('Mana Wraith', 2, CHARACTER_CLASS.ALL, CARD_RARITY
            .RARE)

    def create_minion(self, player):
        return Minion(2, 2, auras=[Aura(ManaChange(1), CardSelector(
            BothPlayer(), IsMinion()))])
predicted code for bleu calculation: 
class Mana(MinionCard):

    def __init__(self):
        super().__init__('Mana Wraith', 2, CHARACTER_CLASS.ALL, CARD_RARITY
            .COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(2, 2)
pred_shorter_than_ref: True
weired: False
------------------------------------------------------------
------------------------------------------------------------
example_id: 585
intent: 
Noble Sacrifice NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END < b > Secret : < /b > When an enemy attacks , summon a 2/1 Defender as the new target .
canonicalized reference: 
class NobleSacrifice(SecretCard):

    def __init__(self):
        super().__init__('Noble Sacrifice', 1, CHARACTER_CLASS.PALADIN,
            CARD_RARITY.COMMON)

    def _reveal(self, attacker, target):
        player = attacker.player.game.other_player
        if len(player.minions) < 7 and not attacker.removed:
            from hearthbreaker.cards.minions.paladin import DefenderMinion
            defender = DefenderMinion()
            defender.summon(player, player.game, len(player.minions))
            attacker.current_target = player.minions[-1]
            super().reveal()

    def activate(self, player):
        player.opponent.bind('character_attack', self._reveal)

    def deactivate(self, player):
        player.opponent.unbind('character_attack', self._reveal)
canonicalized prediction: 
class Noble(MinionCard):

    def __init__(self):
        super().__init__('Noble Sacrifice', 1, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
reference code for bleu calculation: 
class NobleSacrifice(SecretCard):

    def __init__(self):
        super().__init__('Noble Sacrifice', 1, CHARACTER_CLASS.PALADIN,
            CARD_RARITY.COMMON)

    def _reveal(self, attacker, target):
        player = attacker.player.game.other_player
        if len(player.minions) < 7 and not attacker.removed:
            from hearthbreaker.cards.minions.paladin import DefenderMinion
            defender = DefenderMinion()
            defender.summon(player, player.game, len(player.minions))
            attacker.current_target = player.minions[-1]
            super().reveal()

    def activate(self, player):
        player.opponent.bind('character_attack', self._reveal)

    def deactivate(self, player):
        player.opponent.unbind('character_attack', self._reveal)
predicted code for bleu calculation: 
class Noble(MinionCard):

    def __init__(self):
        super().__init__('Noble Sacrifice', 1, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
pred_shorter_than_ref: True
weired: False
------------------------------------------------------------
------------------------------------------------------------
example_id: 588
intent: 
Shadow Madness NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END Gain control of an enemy minion with 3 or less Attack until end of turn .
canonicalized reference: 
class ShadowMadness(SpellCard):

    def __init__(self):
        super().__init__('Shadow Madness', 4, CHARACTER_CLASS.PRIEST,
            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.
            find_enemy_minion_spell_target, filter_func=lambda target: 
            target.calculate_attack() <= 3 and target.spell_targetable())

    def use(self, player, game):
        super().use(player, game)
        minion = self.target.copy(player)
        minion.active = True
        minion.exhausted = False
        self.target.remove_from_board()
        minion.add_to_board(len(player.minions))
        minion.add_buff(BuffUntil(Stolen(), TurnEnded()))

    def can_use(self, player, game):
        return super().can_use(player, game) and len(player.minions) < 7
canonicalized prediction: 
class Shadow(MinionCard):

    def __init__(self):
        super().__init__('Shadow Madness', 4, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
reference code for bleu calculation: 
class ShadowMadness(SpellCard):

    def __init__(self):
        super().__init__('Shadow Madness', 4, CHARACTER_CLASS.PRIEST,
            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.
            find_enemy_minion_spell_target, filter_func=lambda target: 
            target.calculate_attack() <= 3 and target.spell_targetable())

    def use(self, player, game):
        super().use(player, game)
        minion = self.target.copy(player)
        minion.active = True
        minion.exhausted = False
        self.target.remove_from_board()
        minion.add_to_board(len(player.minions))
        minion.add_buff(BuffUntil(Stolen(), TurnEnded()))

    def can_use(self, player, game):
        return super().can_use(player, game) and len(player.minions) < 7
predicted code for bleu calculation: 
class Shadow(MinionCard):

    def __init__(self):
        super().__init__('Shadow Madness', 4, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
pred_shorter_than_ref: True
weired: False
------------------------------------------------------------
------------------------------------------------------------
example_id: 589
intent: 
Siphon Soul NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Rare RARITY_END Destroy a minion . Restore # 3 Health to your hero .
canonicalized reference: 
class SiphonSoul(SpellCard):

    def __init__(self):
        super().__init__('Siphon Soul', 6, CHARACTER_CLASS.WARLOCK,
            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.die(self)
        player.hero.heal(player.effective_heal_power(3), self)
canonicalized prediction: 
class Siphon(MinionCard):

    def __init__(self):
        super().__init__('Siphon Soul', 6, CHARACTER_CLASS.ALL, CARD_RARITY
            .COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
reference code for bleu calculation: 
class SiphonSoul(SpellCard):

    def __init__(self):
        super().__init__('Siphon Soul', 6, CHARACTER_CLASS.WARLOCK,
            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.die(self)
        player.hero.heal(player.effective_heal_power(3), self)
predicted code for bleu calculation: 
class Siphon(MinionCard):

    def __init__(self):
        super().__init__('Siphon Soul', 6, CHARACTER_CLASS.ALL, CARD_RARITY
            .COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
pred_shorter_than_ref: True
weired: False
------------------------------------------------------------
------------------------------------------------------------
example_id: 591
intent: 
Summoning Portal NAME_END 0 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Your minions cost ( 2 ) less , but not less than ( 1 ) .
canonicalized reference: 
class SummoningPortal(MinionCard):

    def __init__(self):
        super().__init__('Summoning Portal', 4, CHARACTER_CLASS.WARLOCK,
            CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(0, 4, auras=[Aura(ManaChange(-2, 1, minimum=1),
            CardSelector(condition=IsMinion()))])
canonicalized prediction: 
class Summoning(MinionCard):

    def __init__(self):
        super().__init__('Summoning Portal', 4, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
reference code for bleu calculation: 
class SummoningPortal(MinionCard):

    def __init__(self):
        super().__init__('Summoning Portal', 4, CHARACTER_CLASS.WARLOCK,
            CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(0, 4, auras=[Aura(ManaChange(-2, 1, minimum=1),
            CardSelector(condition=IsMinion()))])
predicted code for bleu calculation: 
class Summoning(MinionCard):

    def __init__(self):
        super().__init__('Summoning Portal', 4, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
pred_shorter_than_ref: True
weired: False
------------------------------------------------------------
------------------------------------------------------------
example_id: 592
intent: 
Thrallmar Farseer NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END < b > Windfury < /b >
canonicalized reference: 
class ThrallmarFarseer(MinionCard):

    def __init__(self):
        super().__init__('Thrallmar Farseer', 3, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(2, 3, windfury=True)
canonicalized prediction: 
class Thrallmar(MinionCard):

    def __init__(self):
        super().__init__('Thrallmar Farseer', 3, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(2, 3)
reference code for bleu calculation: 
class ThrallmarFarseer(MinionCard):

    def __init__(self):
        super().__init__('Thrallmar Farseer', 3, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(2, 3, windfury=True)
predicted code for bleu calculation: 
class Thrallmar(MinionCard):

    def __init__(self):
        super().__init__('Thrallmar Farseer', 3, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(2, 3)
pred_shorter_than_ref: False
weired: False
------------------------------------------------------------
------------------------------------------------------------
example_id: 593
intent: 
Upgrade ! NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END If you have a weapon , give it +1/+1 . Otherwise equip a 1/3 weapon .
canonicalized reference: 
class Upgrade(SpellCard):

    def __init__(self):
        super().__init__('Upgrade!', 1, CHARACTER_CLASS.WARRIOR,
            CARD_RARITY.RARE)

    def use(self, player, game):
        super().use(player, game)
        from hearthbreaker.cards.weapons.warrior import HeavyAxe
        if player.weapon:
            player.weapon.durability += 1
            player.weapon.base_attack += 1
        else:
            heavy_axe = HeavyAxe().create_weapon(player)
            heavy_axe.equip(player)
canonicalized prediction: 
class Upgrade(MinionCard):

    def __init__(self):
        super().__init__('Upgrade !', 1, CHARACTER_CLASS.ALL, CARD_RARITY.
            COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
reference code for bleu calculation: 
class Upgrade(SpellCard):

    def __init__(self):
        super().__init__('Upgrade!', 1, CHARACTER_CLASS.WARRIOR,
            CARD_RARITY.RARE)

    def use(self, player, game):
        super().use(player, game)
        from hearthbreaker.cards.weapons.warrior import HeavyAxe
        if player.weapon:
            player.weapon.durability += 1
            player.weapon.base_attack += 1
        else:
            heavy_axe = HeavyAxe().create_weapon(player)
            heavy_axe.equip(player)
predicted code for bleu calculation: 
class Upgrade(MinionCard):

    def __init__(self):
        super().__init__('Upgrade !', 1, CHARACTER_CLASS.ALL, CARD_RARITY.
            COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
pred_shorter_than_ref: True
weired: False
------------------------------------------------------------
------------------------------------------------------------
example_id: 595
intent: 
Black Whelp NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Common RARITY_END NIL
canonicalized reference: 
class BlackWhelp(MinionCard):

    def __init__(self):
        super().__init__('Black Whelp', 1, CHARACTER_CLASS.ALL, CARD_RARITY
            .COMMON, False, MINION_TYPE.DRAGON)

    def create_minion(self, player):
        return Minion(2, 1)
canonicalized prediction: 
class Black(MinionCard):

    def __init__(self):
        super().__init__('Black Whelp', 1, CHARACTER_CLASS.ALL, CARD_RARITY
            .COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(2, 1)
reference code for bleu calculation: 
class BlackWhelp(MinionCard):

    def __init__(self):
        super().__init__('Black Whelp', 1, CHARACTER_CLASS.ALL, CARD_RARITY
            .COMMON, False, MINION_TYPE.DRAGON)

    def create_minion(self, player):
        return Minion(2, 1)
predicted code for bleu calculation: 
class Black(MinionCard):

    def __init__(self):
        super().__init__('Black Whelp', 1, CHARACTER_CLASS.ALL, CARD_RARITY
            .COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(2, 1)
pred_shorter_than_ref: True
weired: False
------------------------------------------------------------
------------------------------------------------------------
example_id: 596
intent: 
Dragonkin Sorcerer NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Common RARITY_END Whenever < b > you < /b > target this minion with a spell , gain +1/+1 .
canonicalized reference: 
class DragonkinSorcerer(MinionCard):

    def __init__(self):
        super().__init__('Dragonkin Sorcerer', 4, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON)

    def create_minion(self, player):
        return Minion(3, 5, effects=[Effect(SpellTargeted(), [ActionTag(
            Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]),
            SelfSelector())])])
canonicalized prediction: 
class Dragonkin(MinionCard):

    def __init__(self):
        super().__init__('Dragonkin Sorcerer', 4, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
reference code for bleu calculation: 
class DragonkinSorcerer(MinionCard):

    def __init__(self):
        super().__init__('Dragonkin Sorcerer', 4, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON)

    def create_minion(self, player):
        return Minion(3, 5, effects=[Effect(SpellTargeted(), [ActionTag(
            Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]),
            SelfSelector())])])
predicted code for bleu calculation: 
class Dragonkin(MinionCard):

    def __init__(self):
        super().__init__('Dragonkin Sorcerer', 4, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
pred_shorter_than_ref: True
weired: False
------------------------------------------------------------
------------------------------------------------------------
example_id: 597
intent: 
Hungry Dragon NAME_END 5 ATK_END 6 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Common RARITY_END < b > Battlecry : < /b > Summon a random 1-Cost minion for your opponent .
canonicalized reference: 
class HungryDragon(MinionCard):

    def __init__(self):
        super().__init__('Hungry Dragon', 4, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=
            Battlecry(Summon(CardQuery(conditions=[ManaCost(1), IsMinion()]
            )), PlayerSelector(EnemyPlayer())))

    def create_minion(self, player):
        return Minion(5, 6)
canonicalized prediction: 
class Hungry(MinionCard):

    def __init__(self):
        super().__init__('Hungry Dragon', 4, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
reference code for bleu calculation: 
class HungryDragon(MinionCard):

    def __init__(self):
        super().__init__('Hungry Dragon', 4, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=
            Battlecry(Summon(CardQuery(conditions=[ManaCost(1), IsMinion()]
            )), PlayerSelector(EnemyPlayer())))

    def create_minion(self, player):
        return Minion(5, 6)
predicted code for bleu calculation: 
class Hungry(MinionCard):

    def __init__(self):
        super().__init__('Hungry Dragon', 4, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
pred_shorter_than_ref: True
weired: False
------------------------------------------------------------
------------------------------------------------------------
example_id: 598
intent: 
Solemn Vigil NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Draw 2 cards . Costs ( 1 ) less for each minion that died this turn .
canonicalized reference: 
class SolemnVigil(SpellCard):

    def __init__(self):
        super().__init__('Solemn Vigil', 5, CHARACTER_CLASS.PALADIN,
            CARD_RARITY.COMMON, buffs=[Buff(ManaChange(Count(
            DeadMinionSelector(players=BothPlayer())), -1))])

    def use(self, player, game):
        super().use(player, game)
        for n in range(0, 2):
            player.draw()
canonicalized prediction: 
class Solemn(MinionCard):

    def __init__(self):
        super().__init__('Solemn Vigil', 5, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
reference code for bleu calculation: 
class SolemnVigil(SpellCard):

    def __init__(self):
        super().__init__('Solemn Vigil', 5, CHARACTER_CLASS.PALADIN,
            CARD_RARITY.COMMON, buffs=[Buff(ManaChange(Count(
            DeadMinionSelector(players=BothPlayer())), -1))])

    def use(self, player, game):
        super().use(player, game)
        for n in range(0, 2):
            player.draw()
predicted code for bleu calculation: 
class Solemn(MinionCard):

    def __init__(self):
        super().__init__('Solemn Vigil', 5, CHARACTER_CLASS.ALL,
            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.
            find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
pred_shorter_than_ref: True
weired: False
------------------------------------------------------------
