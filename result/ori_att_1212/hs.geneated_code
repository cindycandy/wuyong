class Darkscale(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Darkscale Healer', 5, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.#NEWLINE#            find_minion_spell_target)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        self.target.damage(player.effective_spell_damage(1), self)
class Frostwolf(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Frostwolf Warlord', 5, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 4)
class Magma(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Magma Rager', 3, CHARACTER_CLASS.ALL, CARD_RARITY#NEWLINE#            .COMMON, minion_type=MINION_TYPE.BEAST)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(5, 1)
class Mortal(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Mortal Coil', 1, CHARACTER_CLASS.ALL, CARD_RARITY#NEWLINE#            .COMMON, target_func=hearthbreaker.targeting.#NEWLINE#            find_minion_spell_target)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        self.target.damage(player.effective_spell_damage(1), self)
class Searing(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Searing Totem', 1, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(1, 1)
class Silverback(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Silverback Patriarch', 3, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.#NEWLINE#            find_minion_spell_target)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        self.target.damage(player.effective_spell_damage(1), self)
class Stormwind(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Stormwind Knight', 4, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.#NEWLINE#            find_minion_spell_target)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        self.target.damage(player.effective_spell_damage(1), self)
class Voodoo(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Voodoo Doctor', 1, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.#NEWLINE#            find_minion_spell_target)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        self.target.damage(player.effective_spell_damage(1), self)
class Astral(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Astral Communion', 4, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.#NEWLINE#            find_minion_spell_target)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        self.target.damage(player.effective_spell_damage(1), self)
class Floating(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Floating Watcher', 5, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 4)
class Gnomish(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Gnomish Experimenter', 3, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(3, 2)
class Iron(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Iron Juggernaut', 6, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(6, 5, effects=[Effect(TurnEnded(), ActionTag(Give(#NEWLINE#            ChangeAttack(1)), SelfSelector()))])
class Madder(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Madder Bomber', 5, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.#NEWLINE#            find_minion_spell_target)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        self.target.damage(player.effective_spell_damage(1), self)
class Scarlet(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Scarlet Purifier', 3, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 3)
class Siltfin(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Siltfin Spiritwalker', 4, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 5)
class Tinkertown(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Tinkertown NAME_END', 3, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.#NEWLINE#            find_minion_spell_target)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        self.target.damage(player.effective_spell_damage(3), self)
class Sludge(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Sludge Belcher', 5, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.#NEWLINE#            find_minion_spell_target)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        self.target.damage(player.effective_spell_damage(1), self)
class Alexstrasza(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Alexstrasza NAME_END', -1, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.#NEWLINE#            find_minion_spell_target)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        self.target.damage(player.effective_spell_damage(1), self)
class Arcane(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Arcane NAME_END', 3, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 2, effects=[Effect(TurnEnded(), ActionTag(Give(#NEWLINE#            ChangeAttack(1)), SelfSelector()))])
class Baine(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Baine Bloodhoof', 4, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 5)
class Blade(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Blade Flurry', 2, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.#NEWLINE#            find_minion_spell_target)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        self.target.damage(player.effective_spell_damage(1), self)
class Doomguard(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Doomguard NAME_END', -1, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.#NEWLINE#            find_minion_spell_target)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        self.target.damage(player.effective_spell_damage(1), self)
class Explosive(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Explosive Trap', 2, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.#NEWLINE#            find_minion_spell_target)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        self.target.damage(player.effective_spell_damage(1), self)
class Gnoll(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Gnoll NAME_END', 2, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 2)
class Holy(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Holy Wrath', 5, CHARACTER_CLASS.ALL, CARD_RARITY.#NEWLINE#            COMMON, target_func=hearthbreaker.targeting.#NEWLINE#            find_minion_spell_target)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        self.target.damage(player.effective_spell_damage(1), self)
class Infernal(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Infernal NAME_END', -1, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(6, 6)
class Mana(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Mana Wraith', 2, CHARACTER_CLASS.ALL, CARD_RARITY#NEWLINE#            .COMMON, minion_type=MINION_TYPE.BEAST)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 2)
class Noble(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Noble Sacrifice', 1, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.#NEWLINE#            find_minion_spell_target)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        self.target.damage(player.effective_spell_damage(1), self)
class Shadow(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Shadow Madness', 4, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.#NEWLINE#            find_minion_spell_target)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        self.target.damage(player.effective_spell_damage(1), self)
class Siphon(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Siphon Soul', 6, CHARACTER_CLASS.ALL, CARD_RARITY#NEWLINE#            .COMMON, target_func=hearthbreaker.targeting.#NEWLINE#            find_minion_spell_target)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        self.target.damage(player.effective_spell_damage(1), self)
class Summoning(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Summoning Portal', 4, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.#NEWLINE#            find_minion_spell_target)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        self.target.damage(player.effective_spell_damage(1), self)
class Thrallmar(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Thrallmar Farseer', 3, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 3)
class Upgrade(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Upgrade !', 1, CHARACTER_CLASS.ALL, CARD_RARITY.#NEWLINE#            COMMON, target_func=hearthbreaker.targeting.#NEWLINE#            find_minion_spell_target)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        self.target.damage(player.effective_spell_damage(1), self)
class Black(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Black Whelp', 1, CHARACTER_CLASS.ALL, CARD_RARITY#NEWLINE#            .COMMON, minion_type=MINION_TYPE.BEAST)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 1)
class Dragonkin(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Dragonkin Sorcerer', 4, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.#NEWLINE#            find_minion_spell_target)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        self.target.damage(player.effective_spell_damage(1), self)
class Hungry(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Hungry Dragon', 4, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.#NEWLINE#            find_minion_spell_target)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        self.target.damage(player.effective_spell_damage(1), self)
class Solemn(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Solemn Vigil', 5, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.#NEWLINE#            find_minion_spell_target)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        self.target.damage(player.effective_spell_damage(1), self)
