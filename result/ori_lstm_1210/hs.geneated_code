class Archmage(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Archmage', 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON#NEWLINE#            )#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 7, auras=[Aura(ChangeAttack(1), MinionSelector())])
class BluegillWarrior(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Booty Bay Bodyguard', 5, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(5, 4, taunt=True)
class BluegillWarrior(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Darkscale Healer', 5, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 5, deathrattle=Battlecry(2(), PlayerSelector()))
class DruidOfTheFlame(WeaponCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Fiery War Axe', 2, CHARACTER_CLASS.ROGUE,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_weapon(self, player):#NEWLINE#        return Weapon(3, 2)
class BluegillWarrior(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Frostwolf Warlord', 5, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(4),#NEWLINE#            CharacterSelector(players=BothPlayer(), picker=UserPicker())))#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 4)
class Hellfire(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Hellfire', 4, CHARACTER_CLASS.WARLOCK,#NEWLINE#            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.#NEWLINE#            find_minion_spell_target)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        self.target.damage(player.effective_spell_damage(3), self)
class Innervate(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Innervate', 0, CHARACTER_CLASS.ROGUE, CARD_RARITY#NEWLINE#            .COMMON)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        for minion in copy.copy(game.other_player.minions):#NEWLINE#            minion.Innervate()
class BluegillWarrior(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Magma Rager', 3, CHARACTER_CLASS.ALL, CARD_RARITY#NEWLINE#            .COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(5, 1)
class WorthlessImp(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Mortal Coil', 1, CHARACTER_CLASS.WARLOCK,#NEWLINE#            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.#NEWLINE#            find_minion_spell_target)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        self.target.damage(player.effective_spell_damage(1), self)
class Polymorph(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Polymorph', 4, CHARACTER_CLASS.WARLOCK,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        for minion in copy.copy(game.other_player.minions):#NEWLINE#            minion.a()
class BluegillWarrior(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Searing Totem', 1, CHARACTER_CLASS.SHAMAN,#NEWLINE#            CARD_RARITY.COMMON, False, MINION_TYPE.TOTEM)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(1, 1)
class BluegillWarrior(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Silverback Patriarch', 3, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(1, 4, taunt=True)
class BluegillWarrior(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Stormwind Knight', 4, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 5, taunt=True, taunt=True)
class BluegillWarrior(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Voodoo Doctor', 1, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST, battlecry=#NEWLINE#            Battlecry(Damage(2), CharacterSelector(players=BothPlayer(),#NEWLINE#            picker=UserPicker())))#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 1)
class DruidOfTheFlame(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Wrath of Air Totem', 1, CHARACTER_CLASS.SHAMAN,#NEWLINE#            CARD_RARITY.COMMON, False, MINION_TYPE.TOTEM)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(0, 2, effects=[Effect(TurnEnded(), ActionTag(Give([#NEWLINE#            Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector()))])
class WorthlessImp(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Astral Communion', 4, CHARACTER_CLASS.ROGUE,#NEWLINE#            CARD_RARITY.EPIC)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        for i in range(0, 10):#NEWLINE#            player.draw()
class Annoy-o-Tron(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Annoy-o-Tron', 2, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(1, 2, auras=[Aura(ChangeAttack(1), MinionSelector())])
class BluegillWarrior(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Burly Rockjaw Trogg', 4, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(3, 5, effects=[Effect(TurnEnded(), [ActionTag(Give([#NEWLINE#            Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector(),#NEWLINE#            GreaterThan(Count(CardSelector()), value=0))])])
class WorthlessImp(WeaponCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Cogmaster Wrench', 3, CHARACTER_CLASS.ROGUE,#NEWLINE#            CARD_RARITY.RARE)#NEWLINE##NEWLINE#    def create_weapon(self, player):#NEWLINE#        return Weapon(1, 3, effects=[Effect(CharacterAttack(IsHero()),#NEWLINE#            ActionTag(Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]),#NEWLINE#            SelfSelector())), Effect(Attack(), ActionTag(Give(player),#NEWLINE#            PlayerSelector()))])#NEWLINE##NEWLINE#    def can_use(self, player):#NEWLINE#        return super().can_use(player, game) and len(player.minions) < 7
class WorthlessImp(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Echo of Medivh', 4, CHARACTER_CLASS.DRUID,#NEWLINE#            CARD_RARITY.RARE)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        for minion in copy.copy(game.other_player.minions):#NEWLINE#            minion.hand()#NEWLINE#        player.draw()
class WorthlessImp(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Floating Watcher', 5, CHARACTER_CLASS.WARLOCK,#NEWLINE#            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 4, effects=[Effect(TurnEnded(player=BothPlayer()),#NEWLINE#            ActionTag(Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]),#NEWLINE#            SelfSelector()))])
class GrimscaleOracle(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Gnomish Experimenter', 3, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(1#NEWLINE#            )), Buff(ChangeHealth(1))]), MinionSelector(players=BothPlayer(#NEWLINE#            ), picker=UserPicker())))#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(3, 2)
class BluegillWarrior(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Iron Juggernaut', 6, CHARACTER_CLASS.HUNTER,#NEWLINE#            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Give([Buff(#NEWLINE#            ChangeAttack(2)), Buff(ChangeHealth(1))]), MinionSelector(#NEWLINE#            players=BothPlayer(), picker=UserPicker())))#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(6, 5)
class BluegillWarrior(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Madder Bomber', 5, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.RARE, minion_type=MINION_TYPE.BEAST, battlecry=#NEWLINE#            Battlecry(Damage(6), CharacterSelector(players=BothPlayer(),#NEWLINE#            picker=UserPicker())))#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(5, 4)
class Mini-Mage(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Mini-Mage', 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 1, effects=[Effect(TurnStarted(), ActionTag(Give([#NEWLINE#            Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector()))])
class BluegillWarrior(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Piloted Sky Golem', 6, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(6, 4, effects=[Effect(TurnEnded(), ActionTag(Give([#NEWLINE#            Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector()))])
class WorthlessImp(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Scarlet Purifier', 3, CHARACTER_CLASS.ROGUE,#NEWLINE#            CARD_RARITY.RARE)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 3, deathrattle=Deathrattle(Damage(2),#NEWLINE#            CharacterSelector(players=BothPlayer())), taunt=True)
class BloodFury(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Siltfin Spiritwalker', 4, CHARACTER_CLASS.HUNTER,#NEWLINE#            CARD_RARITY.RARE, minion_type=MINION_TYPE.BEAST)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 5, effects=[Effect(TurnEnded(), ActionTag(Give([#NEWLINE#            Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector()))])
class BluegillWarrior(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Tinkertown Technician', 3, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),#NEWLINE#            CharacterSelector(players=BothPlayer(), picker=UserPicker())))#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(3, 3)
class Voljin(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Voljin', 5, CHARACTER_CLASS.ROGUE, CARD_RARITY.#NEWLINE#            LEGENDARY, minion_type=MINION_TYPE.BEAST)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(6, 2, deathrattle=Battlecry(Swap(), PlayerSelector()))
class BluegillWarrior(WeaponCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Death Bite', 4, CHARACTER_CLASS.ROGUE,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_weapon(self, player):#NEWLINE#        return Weapon(4, 2, deathrattle=Deathrattle(Damage(1),#NEWLINE#            CharacterSelector(players=BothPlayer(), picker=UserPicker())))#NEWLINE##NEWLINE#    def can_use(self, player, game):#NEWLINE#        return super().can_use(player, game) and len(player.minions) < 7
class Maexxna(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Maexxna', 6, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 8, effects=[Effect(TurnEnded(), ActionTag(Give([#NEWLINE#            Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector()))])
class GrimscaleOracle(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Sludge Belcher', 5, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.LEGENDARY)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(3, 5, effects=[Effect(TurnEnded(), ActionTag(Give([#NEWLINE#            Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector()))])
class Voidcaller(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Voidcaller', 4, CHARACTER_CLASS.WARLOCK,#NEWLINE#            CARD_RARITY.RARE)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(3, 4, effects=[Effect(TurnEnded(), ActionTag(Damage(3#NEWLINE#            ), CharacterSelector(players=BothPlayer(), **None)))])
class Alexstrasza(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Alexstrasza', 9, CHARACTER_CLASS.ALL, CARD_RARITY#NEWLINE#            .LEGENDARY, minion_type=MINION_TYPE.DRAGON, battlecry=Battlecry#NEWLINE#            (Kill(), PlayerSelector()))#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(8, 8)
class ColdlightOracle(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Arcane Golem', 3, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 2, effects=[Effect(TurnEnded(), ActionTag(Give(#NEWLINE#            ChangeHealth(1)), SelfSelector()))])
class GrimscaleOracle(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Baine Bloodhoof', 4, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.LEGENDARY)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 5)
class WorthlessImp(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Blade Flurry', 2, CHARACTER_CLASS.ROGUE,#NEWLINE#            CARD_RARITY.RARE)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        for minion in copy.copy(game.other_player.minions):#NEWLINE#            minion.die(self)
class Brawl(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Brawl', 5, CHARACTER_CLASS.ROGUE, CARD_RARITY.EPIC)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        for minion in copy.copy(game.other_player.minions):#NEWLINE#            minion.minions()
class Conceal(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Conceal', 1, CHARACTER_CLASS.ROGUE, CARD_RARITY.#NEWLINE#            COMMON)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        for minion in copy.copy(game.other_player.minions):#NEWLINE#            minion.minions()
class Defender(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Defender', 1, CHARACTER_CLASS.ROGUE, CARD_RARITY.#NEWLINE#            COMMON, False)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 1)
class Doomguard(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Doomguard', 5, CHARACTER_CLASS.WARLOCK,#NEWLINE#            CARD_RARITY.RARE)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(5, 7, effects=[Effect(TurnEnded(player=BothPlayer()),#NEWLINE#            ActionTag(Give([Buff(ChangeHealth(2)), Buff(ChangeHealth(2))]),#NEWLINE#            SelfSelector()))])
class WorthlessImp(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Earth Elemental', 5, CHARACTER_CLASS.ROGUE,#NEWLINE#            CARD_RARITY.RARE)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(7, 8, effects=[Effect(Damaged(), ActionTag(Give(#NEWLINE#            ChangeAttack(1)), SelfSelector())), Effect(CardPlayed(IsType(#NEWLINE#            MINION_TYPE.BEAST)), ActionTag(Give(ChangeHealth(2)),#NEWLINE#            SelfSelector()))])
class WorthlessImp(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Explosive Trap', 2, CHARACTER_CLASS.ROGUE,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        for minion in copy.copy(game.other_player.minions):#NEWLINE#            minion.damage(player.effective_spell_damage(2), self)
class ColdlightOracle(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Flame of Azzinoth', 1, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 1)
class Gnoll(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Gnoll', 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 2, taunt=True)
class WorthlessImp(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Holy Wrath', 5, CHARACTER_CLASS.DRUID,#NEWLINE#            CARD_RARITY.RARE)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        for i in range(0, 5):#NEWLINE#            player.draw()
class Infernal(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Infernal', 6, CHARACTER_CLASS.WARLOCK,#NEWLINE#            CARD_RARITY.COMMON, False, MINION_TYPE.TOTEM)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(6, 6)
class DruidOfTheFlame(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Kirin Mage Mage', 3, CHARACTER_CLASS.SHAMAN,#NEWLINE#            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(2#NEWLINE#            )), Buff(ChangeHealth(2))]), MinionSelector(picker=UserPicker())))#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 3)
class Lightwarden(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Lightwarden', 1, CHARACTER_CLASS.ALL, CARD_RARITY#NEWLINE#            .RARE)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(1, 2, effects=[Effect(TurnStarted(player=BothPlayer()#NEWLINE#            ), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])
class ColdlightOracle(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Mana Wraith', 2, CHARACTER_CLASS.ALL, CARD_RARITY#NEWLINE#            .RARE)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give(#NEWLINE#            ChangeAttack(1)), SelfSelector()))])
class Misdirection(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Misdirection', 2, CHARACTER_CLASS.ROGUE,#NEWLINE#            CARD_RARITY.RARE)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        targets = copy.copy(game.other_player.minions)#NEWLINE#        targets.extend(player.minions)#NEWLINE#        for minion in targets:#NEWLINE#            minion.another()

class WorthlessImp(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Power the Wild', 2, CHARACTER_CLASS.DRUID,#NEWLINE#            CARD_RARITY.RARE)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        targets = copy.copy(game.other_player.minions)#NEWLINE#        targets.append(game.other_player.hero)#NEWLINE#        for target in targets:#NEWLINE#            target.heal(player.effective_heal_power(2), self)#NEWLINE##NEWLINE#    def can_use(self, player, game):#NEWLINE#        return super().can_use(player, game) and len(player.minions) < 7
class Redemption(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Redemption', 1, CHARACTER_CLASS.ROGUE,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        for i in range(0, 1):#NEWLINE#            player.draw()
class Madness(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Shadow Madness', 4, CHARACTER_CLASS.ROGUE,#NEWLINE#            CARD_RARITY.RARE)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        for minion in copy.copy(game.other_player.minions):#NEWLINE#            minion.Shadow(player.effective_heal_power(3), self)
class WorthlessImp(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Siphon Soul', 6, CHARACTER_CLASS.WARLOCK,#NEWLINE#            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.#NEWLINE#            find_minion_spell_target)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        self.target.die(self)
class Spellbender(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Spellbender', 0, CHARACTER_CLASS.HUNTER,#NEWLINE#            CARD_RARITY.RARE)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(1, 3)
class WorthlessImp(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Summoning Portal', 4, CHARACTER_CLASS.HUNTER,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(0, 4, effects=[Effect(TurnEnded(), ActionTag(Damage(1#NEWLINE#            ), CharacterSelector(players=BothPlayer(), picker=RandomPicker(#NEWLINE#            ))))])
class BluegillWarrior(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Thrallmar Farseer', 3, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 3, taunt=True)
class WorthlessImp(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Upgrade !', 1, CHARACTER_CLASS.PRIEST,#NEWLINE#            CARD_RARITY.RARE)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        for minion in copy.copy(game.other_player.minions):#NEWLINE#            minion.weapon()#NEWLINE#        player.draw()
class Wisp(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Wisp', 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,#NEWLINE#            False, minion_type=MINION_TYPE.BEAST)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(1, 1)
class Black(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Black', 1, CHARACTER_CLASS.ALL, CARD_RARITY.#NEWLINE#            COMMON, False, minion_type=MINION_TYPE.DRAGON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 1)
class BluegillWarrior(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Dragonkin Sorcerer', 4, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(3, 5, effects=[Effect(TurnEnded(), ActionTag(Give([#NEWLINE#            Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector()))])
class BluegillWarrior(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Hungry Dragon', 4, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.RARE, minion_type=MINION_TYPE.DRAGON, battlecry=#NEWLINE#            Battlecry(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]),#NEWLINE#            MinionSelector(players=BothPlayer())))#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(5, 6)
class WorthlessImp(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Solemn Vigil', 5, CHARACTER_CLASS.ROGUE,#NEWLINE#            CARD_RARITY.EPIC)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        for i in range(0, 2):#NEWLINE#            player.draw()#NEWLINE#        player.draw()
